[R2I]
title = "Convert Real To Integer"
description = "Integer(${Real})"
comment =""
category = TC_CONV
returns = integer
[[.args]]
type = real
default = "GetUnitStateSwap"

[S2I]
title = "Convert String To Integer"
description = "Integer(${String})"
comment =""
category = TC_CONV
returns = integer
[[.args]]
type = string
default = "GetEventPlayerChatString"

[I2R]
title = "Convert Integer To Real"
description = "Real(${Integer})"
comment =""
category = TC_CONV
returns = real
[[.args]]
type = integer
default = "GetUnitPointValueByType"

[S2R]
title = "Convert String To Real"
description = "Real(${String})"
comment =""
category = TC_CONV
returns = real
[[.args]]
type = string
default = "GetEventPlayerChatString"

[Deg2Rad]
title = "Convert Degrees To Radians"
description = "Radians(${Degrees})"
comment =""
category = TC_CONV
returns = radian
[[.args]]
type = degree
default = "0"

[Rad2Deg]
title = "Convert Radians To Degrees"
description = "Degrees(${Radians})"
comment =""
category = TC_CONV
returns = degree
[[.args]]
type = radian
default = "0"

[YDWEDeg2R]
title = "YDWE Convert Degrees To Real"
description = "Real ( ${Degrees})"
comment = ""
category = TC_CONV
returns = real
[[.args]]
type = degree

[YDWERad2R]
title = "YDWE Convert Radians To Real"
description = "Real ( ${Radians})"
comment = ""
category = TC_CONV
returns = real
[[.args]]
type = radian

[YDWER2Deg]
title = "YDWE Convert Real To Degree"
description = "Degree ( ${Real})"
comment = ""
category = TC_CONV
returns = degree
[[.args]]
type = real

[YDWER2Rad]
title = "YDWE Convert Real To Radians"
description = "Radians ( ${Real})"
comment = ""
category = TC_CONV
returns = radian
[[.args]]
type = real

[I2S]
title = "Convert Integer To String"
description = "String(${Integer})"
comment =""
category = TC_CONV
returns = string
[[.args]]
type = integer
default = "GetConvertedPlayerId"

[R2S]
title = "Convert Real To String"
description = "String(${Real})"
comment =""
category = TC_CONV
returns = string
[[.args]]
type = real
default = "GetUnitStateSwap"

[R2SW]
title = "Convert Real To Formatted String"
description = "String(${Real}, ${Width}, ${Precision})"
comment = "Examples:  String(1.234, 7, 2) = ''   1.23''.  String(1.234, 2, 5) = ''1.23400''."
category = TC_CONV
returns = string
[[.args]]
type = real
default = "GetUnitStateSwap"
[[.args]]
type = integer
default = "1"
min = 0
[[.args]]
type = integer
default = "2"
min = 0

[OffsetLocation]
title = "Point With Offset"
description = "${Point} offset by (${X}, ${Y})"
comment = "The offset values are (X, Y)."
category = TC_LOCATION
returns = location
[[.args]]
type = location
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[PolarProjectionBJ]
title = "Point With Polar Offset"
description = "${Point} offset by ${Distance} towards ${Angle} degrees"
comment =""
category = TC_LOCATION
returns = location
[[.args]]
type = location
[[.args]]
type = real
default = "256"
[[.args]]
type = degree
default = "0"

[DistanceBetweenPoints]
title = "Distance Between Points"
description = "Distance between ${Point} and ${Point}"
comment = "Returns the Euclidean distance between two points, ignoring height."
category = TC_LOCATION
returns = real
[[.args]]
type = location
[[.args]]
type = location

[AngleBetweenPoints]
title = "Angle Between Points"
description = "Angle from ${Point} to ${Point}"
comment = "Returns the angle of a line from one point to another."
category = TC_LOCATION
returns = degree
[[.args]]
type = location
[[.args]]
type = location

[YDWEDistanceBetweenUnitAndPoint]
title = "Distance Between Unit And Point [New!]"
description = "Distance between ${Unit} to ${Point}"
category = TC_LOCATION
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = location

[YDWEAngleBetweenUnitAndPoint]
title = "Angle  Between Unit And Point [New!]"
description = "Angle between ${Unit} to ${Point}"
category = TC_LOCATION
returns = degree
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = location

[YDWEDistanceBetweenUnits]
title = "Distance Between Unit TO Unit"
description = "Distance between ${Unit} to ${Unit}"
category = TC_LOCATION
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unit
default = "GetLastCreatedUnit"

[YDWEAngleBetweenUnits]
title = "Angle Distance Between Unit TO Unit"
description = "Angle between ${Unit} to ${Unit}"
category = TC_LOCATION
returns = degree
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unit
default = "GetLastCreatedUnit"

[OperatorIntegerAdd]
title = "Add < + >"
description = "${Integer} + ${Integer}"
comment = ""
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer

[OperatorIntegerSubtract]
title = "Subtract < - >"
description = "${Integer} - ${Integer}"
comment = ""
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer

[OperatorIntegerMultiply]
title = "Multiply < x >"
description = "${Integer} x ${Integer}"
comment = ""
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer

[OperatorIntegerDivide]
title = "Divide < / >"
description = "${Integer} / ${Integer}"
comment = ""
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer

[OperatorRealAdd]
title = "Add < + >"
description = "${Real} + ${Real}"
comment = ""
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = real

[OperatorRealSubtract]
title = "Subtract < - >"
description = "${Real} - ${Real}"
comment = ""
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = real

[OperatorRealMultiply]
title = "Multiply < x >"
description = "${Real} x ${Real}"
comment = ""
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = real

[OperatorRealDivide]
title = "Divide < / >"
description = "${Real} / ${Real}"
comment = ""
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = real

[OperatorDegreeAdd]
title = "Add < + >"
description = "${Degree} + ${Degree}"
comment = ""
category = TC_MATH
returns = degree
[[.args]]
type = degree
[[.args]]
type = degree

[OperatorDegreeSubtract]
title = "Subtract < - >"
description = "${Degree} - ${Degree}"
comment = ""
category = TC_MATH
returns = degree
[[.args]]
type = degree
[[.args]]
type = degree

[OperatorDegreeMultiply]
title = "Multiply < x >"
description = "${Degree} x ${Real}"
comment = ""
category = TC_MATH
returns = degree
[[.args]]
type = degree
[[.args]]
type = real

[OperatorDegreeDivide]
title = "Divide < / >"
description = "${Degree} / ${Real}"
comment = ""
category = TC_MATH
returns = degree
[[.args]]
type = degree
[[.args]]
type = real

[OperatorRadianAdd]
title = "Add < + >"
description = "${Radian} + ${Radian}"
comment = ""
category = TC_MATH
returns = radian
[[.args]]
type = radian
[[.args]]
type = real

[OperatorRadianSubtract]
title = "Subtract < - >"
description = "${Radian} - ${Radian}"
comment = ""
category = TC_MATH
returns = radian
[[.args]]
type = radian
[[.args]]
type = real

[OperatorRadianMultiply]
title = "Multiply < x >"
description = "${Radian} x ${Real}"
comment = ""
category = TC_MATH
returns = radian
[[.args]]
type = radian
[[.args]]
type = real

[OperatorRadianDivide]
title = "Divide < / >"
description = "${Radian} / ${Real}"
comment = ""
category = TC_MATH
returns = radian
[[.args]]
type = radian
[[.args]]
type = real

[YDWEIsTriggerEventId]
title = "Trigger Event ID [YDWE]"
description = "If Trigger Event ID is ${Event}"
comment = "Any Unit Event equal Any Unit Event, Special Unit Event equal Special Unit Event"
category = TC_NOTHING
returns = boolean
[[.args]]
type = eventid

[YDWEGetLocalVariableBoolean]
title = "Local Variable (Boolean)"
description = "local_${bl}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = boolean
[[.args]]
type = string

[YDWEGetLocalVariableBooleanArray]
title = "Local Variable Array (Boolean)"
description = "local_${bl}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = boolean
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableInteger]
title = "Local Variable (Integer)"
description = "local_${i}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = integer
[[.args]]
type = string

[YDWEGetLocalVariableIntegerArray]
title = "Local Variable Array (Integer)"
description = "local_${i}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = integer
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableReal]
title = "Local Variable (Real)"
description = "local_${R}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = real
[[.args]]
type = string

[YDWEGetLocalVariableRealArray]
title = "Local Variable Array (Real"
description = "local_${R}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = real
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableString]
title = "Local Variable (String)"
description = "local_${str}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = string
[[.args]]
type = string

[YDWEGetLocalVariableStringArray]
title = "Local Variable Array (String)"
description = "local_${str}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = string
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableLocation]
title = "Local Variable (Location"
description = "local_${point}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = location
[[.args]]
type = string

[YDWEGetLocalVariableLocationArray]
title = "Local Variable Array (Location)"
description = "local_${point}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = location
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableRect]
title = "Local Variable (Rect)"
description = "local_${rt}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = rect
[[.args]]
type = string

[YDWEGetLocalVariableRectArray]
title = "Local Variable Array (Rect)"
description = "local_${rt}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = rect
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableUnit]
title = "Local Variable (Unit)"
description = "local_${u}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = unit
[[.args]]
type = string

[YDWEGetLocalVariableUnitArray]
title = "Local Variable Array (Unit)"
description = "local_${u}[${index}]"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = unit
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableUnitID]
title = "Local Variable (UnitID)"
description = "local_${uid}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = unitcode
[[.args]]
type = string

[YDWEGetLocalVariableUnitIDArray]
title = "Local Variable Array (UnitID)"
description = "local_${uid}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = unitcode
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableItem]
title = "Local Variable (Item)"
description = "local_${it}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = item
[[.args]]
type = string

[YDWEGetLocalVariableItemArray]
title = "Local Variable Array (Item)"
description = "local_${it}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = item
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableItemID]
title = "Local Variable (Item ID)"
description = "local_${itid}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = itemcode
[[.args]]
type = string

[YDWEGetLocalVariableItemIDArray]
title = "Local Variable Array (Item ID)"
description = "local_${itid}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = itemcode
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableAbilityID]
title = "Local Variable (Ability ID)"
description = "local_${abid}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = abilcode
[[.args]]
type = string

[YDWEGetLocalVariableAbilityIDArray]
title = "Local Variable Array (Ability ID)"
description = "local_${abid}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = abilcode
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableGroup]
title = "Local Variable (Group)"
description = "local_${g}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = group
[[.args]]
type = string

[YDWEGetLocalVariableGroupArray]
title = "Local Variable Array (Group)"
description = "local_${g}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = group
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetLocalVariableEffect]
title = "Local Variable (Effect)"
description = "local_${e}"
comment = "Gets a local variable, the parameter is filled in the name of the variable, and the local variable is valid only under the current trigger."
category = TC_YDLC
returns = effect
[[.args]]
type = string

[YDWEGetLocalVariableEffectArray]
title = "Local Variable Array (Effect)"
description = "local_${e}[${index}]"
comment = "Gets an array of local variables, where the parameter is filled in with the name and array index of the variable; local variables are valid only under the current trigger."
category = TC_YDLC
returns = effect
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
min = 0

[YDWEGetBooleanByInteger]
title = "Get Boolean (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Boolean)"
comment = "Get value by Section and Key with War3 Version (Boolean)"
category = TC_YDLD
returns = boolean
[[.args]]
type = integer
[[.args]]
type = integer

[YDWEGetBooleanByString]
title = "Get Boolean (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Boolean)"
comment = "Get value by Section and Key with War3 Version (Boolean)"
category = TC_YDLD
returns = boolean
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetIntegerByInteger]
title = "Get Integer (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Integer)"
comment = "Get value by Section and Key with War3 Version (Integer)"
category = TC_YDLD
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer

[YDWEGetIntegerByString]
title = "Get Integer (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Integer)"
comment = "Get value by Section and Key with War3 Version (Integer)"
category = TC_YDLD
returns = integer
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetRealByInteger]
title = "Get Real (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Real)"
comment = "Get value by Section and Key with War3 Version (Real)"
category = TC_YDLD
returns = real
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetRealByString]
title = "Get Real (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Real)"
comment = "Get value by Section and Key with War3 Version (Real)"
category = TC_YDLD
returns = real
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetStringByInteger]
title = "Get String (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (String)"
comment = "Get value by Section and Key with War3 Version (String)"
category = TC_YDLD
returns = string
[[.args]]
type = integer
[[.args]]
type = integer

[YDWEGetStringByString]
title = "Get String (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (String)"
comment = "Get value by Section and Key with War3 Version (String)"
category = TC_YDLD
returns = string
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetLocationByInteger]
title = "Get Location (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Location)"
comment = "Get value by Section and Key with War3 Version (Location)"
category = TC_YDLD
returns = location
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetLocationByString]
title = "Get Location (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Location)"
comment = "Get value by Section and Key with War3 Version (Location)"
category = TC_YDLD
returns = location
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetRegionByInteger]
title = "Get Region (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Region)"
comment = "Get value by Section and Key with War3 Version (Region)"
category = TC_YDLD
returns = region
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetRegionByString]
title = "Get Region (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Region)"
comment = "Get value by Section and Key with War3 Version (Region)"
category = TC_YDLD
returns = region
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetRectByInteger]
title = "Get Rect (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Rect)"
comment = "Get value by Section and Key with War3 Version (Rect)"
category = TC_YDLD
returns = rect
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetRectByString]
title = "Get Region (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Rect)"
comment = "Get value by Section and Key with War3 Version (Rect)"
category = TC_YDLD
returns = rect
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetUnitByInteger]
title = "Get Unit (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Unit)"
comment = "Get value by Section and Key with War3 Version (Unit)"
category = TC_YDLD
returns = unit
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetUnitByString]
title = "Get Unit (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Unit)"
comment = "Get value by Section and Key with War3 Version (Unit)"
category = TC_YDLD
returns = unit
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetUnitIDByInteger]
title = "Get Unit Type (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Unit Type)"
comment = "Get value by Section and Key with War3 Version (Unit Type)"
category = TC_YDLD
returns = unitcode
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetUnitIDByString]
title = "Get Unit Type (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Unit Type)"
comment = "Get value by Section and Key with War3 Version (Unit Type)"
category = TC_YDLD
returns = unitcode
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetDestructableByInteger]
title = "Get Destructable (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Destructable)"
comment = "Get value by Section and Key with War3 Version (Destructable)"
category = TC_YDLD
returns = destructable
[[.args]]
type = integer
min = 0
max = 1
[[.args]]
type = integer
min = 0
max = 1

[YDWEGetDestructableByString]
title = "Get Destructable (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Destructable)"
comment = "Get value by Section and Key with War3 Version (Destructable)"
category = TC_YDLD
returns = destructable
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetItemByInteger]
title = "Get Item (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Item)"
comment = "Get value by Section and Key with War3 Version (Item)"
category = TC_YDLD
returns = item
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetItemByString]
title = "Get Item (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Item)"
comment = "Get value by Section and Key with War3 Version (Item)"
category = TC_YDLD
returns = item
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetItemIDByInteger]
title = "Get Item Type (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Item Type)"
comment = "Get value by Section and Key with War3 Version (Item Type)"
category = TC_YDLD
returns = itemcode
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetItemIDByString]
title = "Get Item Type (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Item Type)"
comment = "Get value by Section and Key with War3 Version (Item Type)"
category = TC_YDLD
returns = itemcode
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetAbilityIDByInteger]
title = "Get Ability (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Ability)"
comment = "Get value by Section and Key with War3 Version (Ability)"
category = TC_YDLD
returns = abilcode
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetAbilityIDByString]
title = "Get Ability (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Ability)"
comment = "Get value by Section and Key with War3 Version (Ability)"
category = TC_YDLD
returns = abilcode
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetPlayerByInteger]
title = "Get Player (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Player)"
comment = "Get value by Section and Key with War3 Version (Player)"
category = TC_YDLD
returns = player
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetPlayerByString]
title = "Get Player (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Player)"
comment = "Get value by Section and Key with War3 Version (Player)"
category = TC_YDLD
returns = player
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetGroupByInteger]
title = "Get Unit Group (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Unit Group)"
comment = "Get value by Section and Key with War3 Version (Unit Group)"
category = TC_YDLD
returns = group
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetGroupByString]
title = "Get Unit Group (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Unit Group)"
comment = "Get value by Section and Key with War3 Version (Unit Group)"
category = TC_YDLD
returns = group
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetForceByInteger]
title = "Get Force (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Force)"
comment = "Get value by Section and Key with War3 Version (Force)"
category = TC_YDLD
returns = force
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetForceByString]
title = "Get Force (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Force)"
comment = "Get value by Section and Key with War3 Version (Force)"
category = TC_YDLD
returns = force
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetTriggerConditionByInteger]
title = "Get Condition (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Condition)"
comment = "Get value by Section and Key with War3 Version (Condition)"
category = TC_YDLD
returns = triggercondition
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetTriggerConditionByString]
title = "Get Condition (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Condition)"
comment = "Get value by Section and Key with War3 Version (Condition)"
category = TC_YDLD
returns = triggercondition
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetTriggerActionByInteger]
title = "Get Trigger Action (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Trigger Action)"
comment = "Get value by Section and Key with War3 Version (Trigger Action)"
category = TC_YDLD
returns = triggeraction
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetTriggerActionByString]
title = "Get Trigger Action (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Trigger Action)"
comment = "Get value by Section and Key with War3 Version (Trigger Action)"
category = TC_YDLD
returns = triggeraction
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetTriggerEventByInteger]
title = "Get Event (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Event)"
comment = "Get value by Section and Key with War3 Version (Event)"
category = TC_YDLD
returns = event
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetTriggerEventByString]
title = "Get Event (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Event)"
comment = "Get value by Section and Key with War3 Version (Event)"
category = TC_YDLD
returns = event
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetBoolexprByInteger]
title = "Get Boolexpr (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Boolexpr)"
comment = "Get value by Section and Key with War3 Version (Boolexpr)"
category = TC_YDLD
returns = boolexpr
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetBoolexprByString]
title = "Get Boolexpr (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Boolexpr)"
comment = "Get value by Section and Key with War3 Version (Boolexpr)"
category = TC_YDLD
returns = boolexpr
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetTriggerByInteger]
title = "Get Trigger (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Trigger)"
comment = "Get value by Section and Key with War3 Version (Trigger)"
category = TC_YDLD
returns = trigger
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetTriggerByString]
title = "Get Trigger (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Trigger)"
comment = "Get value by Section and Key with War3 Version (Trigger)"
category = TC_YDLD
returns = trigger
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetEffectByInteger]
title = "Get Effect (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Effect)"
comment = "Get value by Section and Key with War3 Version (Effect)"
category = TC_YDLD
returns = effect
[[.args]]
type = integer
[[.args]]
type = integer

[YDWEGetEffectByString]
title = "Get Effect (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Effect)"
comment = "Get value by Section and Key with War3 Version (Effect)"
category = TC_YDLD
returns = effect
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetLightningByInteger]
title = "Get Lightning (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Lightning)"
comment = "Get value by Section and Key with War3 Version (Lightning)"
category = TC_YDLD
returns = lightning
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetLightningByString]
title = "Get Lightning (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Lightning)"
comment = "Get value by Section and Key with War3 Version (Lightning)"
category = TC_YDLD
returns = lightning
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetSoundByInteger]
title = "Get Sound (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Sound)"
comment = "Get value by Section and Key with War3 Version (Sound)"
category = TC_YDLD
returns = sound
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetSoundByString]
title = "Get Sound (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Sound)"
comment = "Get value by Section and Key with War3 Version (Sound)"
category = TC_YDLD
returns = sound
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetQuestByInteger]
title = "Get Quest (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Quest)"
comment = "Get value by Section and Key with War3 Version (Quest)"
category = TC_YDLD
returns = quest
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetQuestByString]
title = "Get Quest (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Quest)"
comment = "Get value by Section and Key with War3 Version (Quest)"
category = TC_YDLD
returns = quest
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetQuestItemByInteger]
title = "Get Quest Item (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Quest Item)"
comment = "Get value by Section and Key with War3 Version (Quest Item)"
category = TC_YDLD
returns = questitem
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetQuestItemByString]
title = "Get Quest Item (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Quest Item)"
comment = "Get value by Section and Key with War3 Version (Quest Item)"
category = TC_YDLD
returns = questitem
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetDialogByInteger]
title = "Get Dialog (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Dialog)"
comment = "Get value by Section and Key with War3 Version (Dialog)"
category = TC_YDLD
returns = dialog
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetDialogByString]
title = "Get Dialog (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Dialog)"
comment = "Get value by Section and Key with War3 Version (Dialog)"
category = TC_YDLD
returns = dialog
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetButtonByInteger]
title = "Get Dialog Button (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Dialog Button)"
comment = "Get value by Section and Key with War3 Version (Dialog Button)"
category = TC_YDLD
returns = button
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetButtonByString]
title = "Get Dialog Button (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Dialog Button)"
comment = "Get value by Section and Key with War3 Version (Dialog Button)"
category = TC_YDLD
returns = button
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetLeaderboardByInteger]
title = "Get Leaderboard (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Leaderboard)"
comment = "Get value by Section and Key with War3 Version (Leaderboard)"
category = TC_YDLD
returns = leaderboard
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetLeaderboardByString]
title = "Get Leaderboard (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Leaderboard)"
comment = "Get value by Section and Key with War3 Version (Leaderboard)"
category = TC_YDLD
returns = leaderboard
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetMultiBoardByInteger]
title = "Get Multi Board (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Multi Board)"
comment = "Get value by Section and Key with War3 Version (Multi Board)"
category = TC_YDLD
returns = multiboard
[[.args]]
type = integer
[[.args]]
type = integer

[YDWEGetMultiBoardByString]
title = "Get Multi Board (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Multi Board)"
comment = "Get value by Section and Key with War3 Version (Multi Board)"
category = TC_YDLD
returns = multiboard
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetMultiBoardItemByInteger]
title = "Get Multi Board Item (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Multi Board Item)"
comment = "Get value by Section and Key with War3 Version (Multi Board Item)"
category = TC_YDLD
returns = multiboarditem
[[.args]]
type = integer
[[.args]]
type = integer

[YDWEGetMultiBoardItemByString]
title = "Get Multi Board Item (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Multi Board Item)"
comment = "Get value by Section and Key with War3 Version (Multi Board Item)"
category = TC_YDLD
returns = multiboarditem
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetTimerByInteger]
title = "Get Timer (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Timer)"
comment = "Get value by Section and Key with War3 Version (Timer)"
category = TC_YDLD
returns = timer
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetTimerByString]
title = "Get Timer (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Timer)"
comment = "Get value by Section and Key with War3 Version (Timer)"
category = TC_YDLD
returns = timer
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetTimerDialogByInteger]
title = "Get Timer Window (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Timer Window)"
comment = "Get value by Section and Key with War3 Version (Timer Window)"
category = TC_YDLD
returns = timerdialog
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetTimerDialogByString]
title = "Get Timer Window (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Timer Window)"
comment = "Get value by Section and Key with War3 Version (Timer Window)"
category = TC_YDLD
returns = timerdialog
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetTrackableByInteger]
title = "Get Trackable (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Trackable)"
comment = "Get value by Section and Key with War3 Version (Trackable)"
category = TC_YDLD
returns = trackable
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetTrackableByString]
title = "Get Trackable (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Trackable)"
comment = "Get value by Section and Key with War3 Version (Trackable)"
category = TC_YDLD
returns = trackable
[[.args]]
type = string
[[.args]]
type = string

[YDWEGetTextTagByInteger]
title = "Get Text Tag (By Integer)"
description = "Get data from Section -> ${Integer}, Key-> ${Integer} (Text Tag)"
comment = "Get value by Section and Key with War3 Version (Text Tag)"
category = TC_YDLD
returns = texttag
[[.args]]
type = integer
min = 0
[[.args]]
type = integer
min = 0

[YDWEGetTextTagByString]
title = "YDWE Get Text Tag (By String)"
description = "Get data from Section -> ${String}, Key-> ${String} (Text Tag)"
comment = "Get value by Section and Key with War3 Version (Text Tag)"
category = TC_YDLD
returns = texttag
[[.args]]
type = string
[[.args]]
type = string

[YDWEIsItemSwitch]
title = "YDWE Item Bag Switch[YDWE]"
description = "${Unit} is on Switch item Bag."
comment = "To determine whether a unit is switching backpacks, avoid obtaining and dropping items when units switch backpacks."
category = TC_YDST
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[YDWE_TP_GetExpiredTimerIndex]
title = "YDWE Center Timer - Get Expired Timer Index <By Fetrix_sai>"
description = "Get expired timer index"
comment = "When the central timer runs a trigger, a run index is generated; this article API runs the trigger according to the parameters set and returns a running index."
category = TC_YDST
returns = integer

[YDWE_TP_NewTimerPeriodic]
title = "YDWE Center Timer - New Timer Periodic<By Fetrix_sai>"
description = "Start a new timer periodic, inteval is ${time} seconds, if loop is ${bool}, execute ${Trigger} when expired"
comment = "When the central timer runs a trigger, a run index is generated; this article API runs the trigger according to the parameters set and returns a running index."
category = TC_YDST
returns = integer
[[.args]]
type = real
default = "0.03"
min = 0.01
[[.args]]
type = boolean
default = "true"
[[.args]]
type = trigger
default = "GetTriggeringTrigger"

[YDWEGeneralBounsSystemUnitGetBonus]
title = "YDWE General Bouns System-Unit Get Bonus<By Eggplant>"
description = "Get Bouns form ${Unit} on ${Attribute}"
comment = ""
category = TC_YDST
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = bonusType
default = "bonusTypeA"

[YDWE_TP_GetElapsedTime]
title = "YDWE Center Timer - GetElapsedTime<By Fetrix_sai>"
description = "Get elapsed time on center timer of ${Timer Index} "
comment = ""
category = TC_YDST
returns = real
[[.args]]
type = integer

[YDWE_TP_GetRemainingTime]
title = "YDWE Center Timer - Get Remaining Time<By Fetrix_sai>"
description = "Get remain time on center timer of ${Timer Index}"
comment = ""
category = TC_YDST
returns = real
[[.args]]
type = integer

[YDWE_TP_GetTimeout]
title = "YDWE Center Timer - Get Timeout<By Fetrix_sai>"
description = "Get timeout on center timer of ${Timer Index}"
comment = ""
category = TC_YDST
returns = real
[[.args]]
type = integer

["  "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = boolean
[[.args]]
type = scriptcode

[StringLength]
title = "String Length"
description = "Length of ${String}"
comment =""
category = TC_NOTHING
returns = integer
[[.args]]
type = string
default = "GetEventPlayerChatString"

[" "]
title = "Integer Format Form  [R]"
description = "Integer format: ${Integer}"
comment = "You can use integer forms such as 0x1ab3 and'A001', or write arithmetic expressions directly. "
category = TC_NOTHING
returns = integer
[[.args]]
type = scriptcode

["   "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = real
[[.args]]
type = scriptcode

[GetLocationX]
title = "X Of Point"
description = "X of ${Point}"
comment =""
category = TC_NOTHING
returns = real
[[.args]]
type = location

[GetLocationY]
title = "Y Of Point"
description = "Y of ${Point}"
comment =""
category = TC_NOTHING
returns = real
[[.args]]
type = location

[GetLocationZ]
title = "Z of Point [R]"
description = "Z of ${Point}"
comment = ""
category = TC_NOTHING
returns = real
[[.args]]
type = location

[OperatorString]
title = "Concatenate Strings"
description = "${String 1} + ${String 2}"
comment =""
category = TC_NOTHING
returns = string
[[.args]]
type = string
default = null
[[.args]]
type = string
default = null

[YDWEOperatorString3]
title = "Concatenate Strings Lv3"
description = "${String1} + ${String2} + ${String3}"
comment = ""
category = TC_NOTHING
returns = string
[[.args]]
type = string
default = null
[[.args]]
type = string
default = null
[[.args]]
type = string
default = null

["    "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = string
[[.args]]
type = scriptcode

[GetObjectName]
title = "Object Name [C]"
description = "$Name of ${Object ID}"
comment = "E.g. the name of 'A01Z' in object editor"
category = TC_NOTHING
returns = string
[[.args]]
type = scriptcode

[SubStringBJ]
title = "Substring [R]"
description = "Substring(${String}, ${Start}, ${End})"
comment = "Example:  Substring(''Grunts stink'', 2, 4) = ''run''."
category = TC_NOTHING
returns = string
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
[[.args]]
type = integer
default = "5"

[SubString]
title = "Substring [R]"
description = "Substring (${String} , ${Start} , ${End})"
comment = "Example:  Substring(''Grunts stink'', 2, 4) = ''run''."
category = TC_NOTHING
returns = string
[[.args]]
type = string
[[.args]]
type = integer
default = "1"
[[.args]]
type = integer
default = "5"

[GetRectCenter]
title = "Center Of Region"
description = "Center of ${Region}"
comment =""
category = TC_NOTHING
returns = location
[[.args]]
type = rect
default = "GetPlayableMapRect"

[GetRandomLocInRect]
title = "Random Point In Region"
description = "Random point in ${Region}"
comment =""
category = TC_NOTHING
returns = location
[[.args]]
type = rect
default = "GetPlayableMapRect"

["     "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = location
[[.args]]
type = scriptcode

[GetCurrentCameraBoundsMapRectBJ]
title = "Current Camera Bounds"
description = "Current camera bounds"
comment = "This is the area to which the camera target is currently restricted."
category = TC_NOTHING
returns = rect

[GetCameraBoundsMapRect]
title = "Initial Camera Bounds"
description = "Initial camera bounds"
comment = "This is the area to which the camera target is restricted at map initialization."
category = TC_NOTHING
returns = rect

[GetPlayableMapRect]
title = "Playable Map Area"
description = "Playable map area"
comment = "This is the area to which units are restricted.  This area typically extends just beyond the camera bounds."
category = TC_NOTHING
returns = rect

[GetEntireMapRect]
title = "Entire Map"
description = "Entire map"
comment = "This is the entire map, including areas which cannot normally be reached by units."
script_name = GetWorldBounds
category = TC_NOTHING
returns = rect

[YDWEGetRect]
title = "New Rect(Center Location)[YDWE]"
description = "Create a Rect at (${x},${y}) with height ${Real}, width ${Real}"
comment = "Create a Rect"
category = TC_NOTHING
returns = rect
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "100"
min = 0
[[.args]]
type = real
default = "50"
min = 0

[OffsetRectBJ]
title = "Region With Offset"
description = "${Region} offset by (${X}, ${Y})"
comment = "The offset values are (X, Y)."
category = TC_NOTHING
returns = rect
[[.args]]
type = rect
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[RectFromCenterSizeBJ]
title = "Convert Point With Size To Region"
description = "Region centered at ${Point} with size (${Width}, ${Height})"
comment = "The size values are (Width, Height)."
category = TC_NOTHING
returns = rect
[[.args]]
type = location
[[.args]]
type = real
[[.args]]
type = real

[Rect]
title = "Convert Coordinates To Region"
description = "Region(${X1}, ${Y1}, ${X2}, ${Y2})"
comment = "Choose four coordinates (min X, min Y, max X, max Y) to define a rectangular region on the map."
category = TC_NOTHING
returns = rect
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[RectFromLoc]
title = "Convert Points To Region"
description = "Region(${Point 1}, ${Point 2})"
comment = "Choose two points to define a rectangular region on the map."
category = TC_NOTHING
returns = rect
[[.args]]
type = location
default = "Location"
[[.args]]
type = location
default = "Location"

[CreateUnit]
title = "Create Units (Coordinates)"
description = "For ${Player} , Create a ${Unit} at (${X}, ${Y}) and make it facing ${Direction}"
comment = "Create a unit at location, can not use 'Last Created Unit' to get the unit."
category = TC_NOTHING
returns = unit
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unitcode
default = "hfoo"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = degree
default = "0"

[CreateUnitAtLoc]
title = "Create Units (Location)"
description = "For ${Player} , Create a ${Unit} at ${Location} and make it facing ${Direction}"
comment = ""
category = TC_NOTHING
returns = unit
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unitcode
default = "hfoo"
[[.args]]
type = location
[[.args]]
type = degree
default = "0"

[CreateCorpse]
title = "Create Corpse [R]"
description = "For ${Player} , Create a corpse ${Unit} at (${X}, ${Y}) and make it facing ${Direction}"
comment = ""
category = TC_NOTHING
returns = unit
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unitcode
default = "hfoo"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = degree
default = "0"

[CreateBlightedGoldmine]
title = "Create Blighted Goldmine [R]"
description = "For ${Player} , Create a Blighted Goldmine at (${X},${Y}) and make it facing ${Direction}"
comment = ""
category = TC_NOTHING
returns = unit
[[.args]]
type = player
default = "Player00"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = degree
default = "0"

[GetEnumUnit]
title = "Picked Unit"
description = "Picked unit"
comment = "When using the 'Pick Every Unit...' action, this refers to each unit as it is picked."
category = TC_NOTHING
returns = unit

[GetFilterUnit]
title = "Matching Unit"
description = "Matching unit"
comment = "Use this to refer to the unit being considered for 'Units Matching Condition' functions."
category = TC_NOTHING
returns = unit

[FirstOfGroup]
title = "First Of Unit Group"
description = "Get the first Unit in ${Unit Group}"
category = TC_NOTHING
returns = unit
[[.args]]
type = group

["      "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script."
category = TC_YDHIDE
returns = unit
[[.args]]
type = scriptcode

[GroupPickRandomUnit]
title = "Random Unit From Unit Group"
description = "Random unit from ${Unit Group}"
comment =""
category = TC_NOTHING
returns = unit
[[.args]]
type = group

[CreateUnitPool]
title = "Create Unit Pool [R]"
description = "Create a new unit pool"
comment = "Create a unit pool"
category = TC_NOTHING
use_in_event = 0
returns = unitpool

[GetUnitTypeId]
title = "Unit-Type Of Unit"
description = "Unit-type of ${Unit}"
comment =""
category = TC_NOTHING
returns = unitcode
[[.args]]
type = unit
default = "GetTriggerUnit"

["       "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script."
category = TC_YDHIDE
returns = unitcode
[[.args]]
type = scriptcode

[ChooseRandomCreepBJ]
title = "Random Creep Unit-Type"
description = "Random level ${Level} creep unit-type"
comment = "Use -1 for any level."
script_name = ChooseRandomCreep
category = TC_NOTHING
returns = unitcode
[[.args]]
type = integer
default = "1"
min = -1
max = 10

[ChooseRandomNPBuildingBJ]
title = "Random Neutral Building Unit-Type"
description = "Random neutral building unit-type"
comment =""
script_name = ChooseRandomNPBuilding
category = TC_NOTHING
returns = unitcode

[CreateDestructableZ]
title = "Create Destructable [R]"
description = "Create a destrctable of ${Destructable type} at (${X},${Y},${Z}), facing: ${Direction}, scale: ${Scale}, style: ${Variation}"
comment = "Location is format as(X,Y,Z). Angle oriented system, 0 degrees for the east direction, 90 degrees is the right north direction."
category = TC_NOTHING
returns = destructable
[[.args]]
type = destructablecode
default = "LTlt"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "GetRandomDirectionDeg"
[[.args]]
type = real
default = "1"
[[.args]]
type = integer
default = "0"

[CreateDeadDestructableZ]
title = "Create Destructable(Death) [R]"
description = "Create a dead destrctable of ${Destructable type} at (${X},${Y},${Z}), facing: ${Direction}, scale: ${Scale}, style: ${Variation}"
comment = "Location is format as(X,Y,Z). Angle oriented system, 0 degrees for the east direction, 90 degrees is the right north direction."
category = TC_NOTHING
returns = destructable
[[.args]]
type = destructablecode
default = "LTlt"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "GetRandomDirectionDeg"
[[.args]]
type = real
default = "1"
[[.args]]
type = integer
default = "0"

[RandomDestructableInRectSimpleBJ]
title = "Random Destructable In Region"
description = "Random Destructable in ${Region}"
comment =""
category = TC_NOTHING
returns = destructable
[[.args]]
type = rect

[RandomDestructableInRectBJ]
title = "Random Destructable In Region Matching Condition"
description = "Random Destructable in ${Region} matching ${Condition}"
comment = "Use 'Matching Destructable' to refer to the Destructable being considered."
category = TC_NOTHING
returns = destructable
[[.args]]
type = rect
[[.args]]
type = boolexpr

[GetEnumDestructable]
title = "Picked Destructable"
description = "Picked Destructable"
comment = "When using the 'Pick Every Destructable...' action, this refers to each Destructable as it is picked."
category = TC_NOTHING
returns = destructable

[GetFilterDestructable]
title = "Matching Destructable"
description = "Matching Destructable"
comment = "Use this to refer to the Destructable being considered for the 'Random Destructable' functions."
category = TC_NOTHING
returns = destructable

[GetDestructableTypeId]
title = "Destructable-Type of Destructable"
description = "Destructable-type of ${Destructable}"
comment =""
category = TC_NOTHING
returns = destructablecode
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[CreateItem]
title = "Create Item [R]"
description = "Create a item of  ${Item} at (${X},${Y})"
comment = ""
category = TC_NOTHING
returns = item
[[.args]]
type = itemcode
default = "texp"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[UnitDropItem]
title = "Unit Drop Item"
description = "Make ${Unit} Drop ${Item}"
comment = "An item is created at random points in the area of the unit (32x32), and it is noted that when the unit is standing next to the non passable path, the item may fall and can not be picked up."
category = TC_NOTHING
returns = item
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = itemcode
default = "texp"

[RandomItemInRectSimpleBJ]
title = "Random Item In Region"
description = "Random item in ${Region}"
comment =""
category = TC_NOTHING
use_in_event = 0
returns = item
[[.args]]
type = rect

[RandomItemInRectBJ]
title = "Random Item In Region Matching Condition"
description = "Random item in ${Region} matching ${Condition}"
comment = "Use 'Matching Item' to refer to the item being considered."
category = TC_NOTHING
use_in_event = 0
returns = item
[[.args]]
type = rect
[[.args]]
type = boolexpr

[GetEnumItem]
title = "Picked Item"
description = "Picked item"
comment = "When using the 'Pick Every Item...' action, this refers to each item as it is picked."
category = TC_NOTHING
use_in_event = 0
returns = item

[GetFilterItem]
title = "Matching Item"
description = "Matching item"
comment = "Use this to refer to the item being considered for the 'Random Item' functions."
category = TC_NOTHING
use_in_event = 0
returns = item

[UnitItemInSlot]
title = "Unit Have Item In Slot"
description = "${Unit} have item at the slot ${Index} "
comment = "The index of the first slot is 0."
category = TC_NOTHING
returns = item
[[.args]]
type = unit
[[.args]]
type = integer
default = "0"
min = 0
max = 5

[UnitItemInSlotBJ]
title = "Item Carried By Hero"
description = "Item carried by ${Hero} in slot ${Index}"
comment =""
category = TC_NOTHING
returns = item
[[.args]]
type = unit
[[.args]]
type = integer
default = "1"
min = 1
max = 6

[GetItemOfTypeFromUnitBJ]
title = "Item Carried By Hero Of Type"
description = "Item carried by ${Hero} of type ${Item-Type}"
comment =""
category = TC_NOTHING
returns = item
[[.args]]
type = unit
[[.args]]
type = itemcode
default = "texp"

[CreateItemPool]
title = "Create Item Pool [R]"
description = "Create a empty Item Pool"
comment = "Create a Item Pool."
category = TC_NOTHING
use_in_event = 0
returns = itempool

[YDWEGetLastItemPool]
title = "YDWE Last Created Item Pool [YDWE]"
description = "Last Created Item Pool"
comment = "The item pool must be generated by YDWE, <Create Item Pool> action, otherwise it will not be available."
category = TC_NOTHING
use_in_event = 0
returns = itempool

[YDWEGetLastPoolAbstractedItem]
title = "YDWE Last Picked Item From Item Pool[YDWE]"
description = "Las picked item from item Pool"
comment = "The item must be provided by YDWE. <Choose Placed Item> action generated, otherwise it can not be obtained."
category = TC_NOTHING
use_in_event = 0
returns = item

[GetItemType]
title = "Item-Class Of Item"
description = "Item-class of ${Item}"
comment =""
category = TC_NOTHING
returns = itemtype
[[.args]]
type = item
default = "GetLastCreatedItem"

[GetItemTypeId]
title = "Item-Type Of Item"
description = "Item-type of ${Item}"
comment =""
category = TC_NOTHING
returns = itemcode
[[.args]]
type = item
default = "GetLastCreatedItem"

["        "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = itemcode
[[.args]]
type = scriptcode

[ChooseRandomItemExBJ]
title = "Random Item-Type Of Class"
description = "Random level ${Level} ${Class} item-type"
comment = "This function corresponds to the newer item classification system with levels 0-8.  Use -1 for any level."
category = TC_NOTHING
returns = itemcode
[[.args]]
type = integer
default = "1"
min = -1
[[.args]]
type = itemtype
default = "ItemTypeAny"

[ChooseRandomItemBJ]
title = "Random Item-Type"
description = "Random level ${Level} item-type"
comment = "This function corresponds to the original unclassified item system with levels 0-10.  Use -1 for any level."
script_name = ChooseRandomItem
category = TC_NOTHING
returns = itemcode
[[.args]]
type = integer
default = "1"
min = -1

["         "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = abilcode
[[.args]]
type = scriptcode

[GetEnumPlayer]
title = "Picked Player"
description = "Picked player"
comment = "When using the 'Pick Every Player...' action, this refers to each player as he/she is picked."
category = TC_NOTHING
returns = player

[GetFilterPlayer]
title = "Matching Player"
description = "Matching player"
comment = "Use this to refer to the player being considered for the 'All Players Matching Condition' function."
category = TC_NOTHING
returns = player

[GetOwningPlayer]
title = "Owner Of Unit"
description = "Owner of ${Unit}"
comment =""
category = TC_NOTHING
returns = player
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetItemPlayer]
title = "Owner Of Item"
description = "Owner of ${Item}"
comment =""
category = TC_NOTHING
returns = player
[[.args]]
type = item
default = "GetLastCreatedItem"

[ForcePickRandomPlayer]
title = "Random Player From Player Group"
description = "Random player from ${Player Group}"
comment =""
category = TC_NOTHING
returns = player
[[.args]]
type = force

[GetLocalPlayer]
title = "Get Local Player [R]"
description = "Local Player"
comment = "Get the player of the user self, each player get a different value, if you do not know clearly, do not use this function, otherwise it will cause disconnect"
category = TC_NOTHING
returns = player

["          "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = player
[[.args]]
type = scriptcode

[CreateGroup]
title = "Create Unit Group [R]"
description = "Create a empty Unit Group"
comment = "Create a Unit Group."
category = TC_NOTHING
returns = group

["           "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = group
[[.args]]
type = scriptcode

[GetRandomSubGroup]
title = "Random N Units From Unit Group"
description = "Random ${Count} units from ${Unit Group}"
comment =""
category = TC_NOTHING
use_in_event = 0
returns = group
[[.args]]
type = integer
default = "4"
[[.args]]
type = group
default = "GetUnitsInRectAll"

[GetUnitsInRectAll]
title = "Units In Region"
description = "Units in ${Region}"
comment =""
category = TC_NOTHING
returns = group
[[.args]]
type = rect
default = "GetPlayableMapRect"

[GetUnitsInRectOfPlayer]
title = "Units In Region Owned By Player"
description = "Units in ${Region} owned by ${Player}"
comment =""
category = TC_NOTHING
returns = group
[[.args]]
type = rect
default = "GetPlayableMapRect"
[[.args]]
type = player
default = "Player00"

[GetUnitsInRectMatching]
title = "Units In Region Matching Condition"
description = "Units in ${Region} matching ${Condition}"
comment = "Use 'Matching Unit' to refer to the unit on whom the comparison is being performed."
category = TC_NOTHING
returns = group
[[.args]]
type = rect
default = "GetPlayableMapRect"
[[.args]]
type = boolexpr

[GetUnitsInRangeOfLocAll]
title = "Units In Range"
description = "Units within ${Radius} of ${Point}"
comment =""
category = TC_NOTHING
returns = group
[[.args]]
type = real
default = "512"
min = 0
[[.args]]
type = location
default = "GetRectCenter"

[GetUnitsInRangeOfLocMatching]
title = "Units In Range Matching Condition"
description = "Units within ${Radius} of ${Point} matching ${Condition}"
comment = "Use 'Matching Unit' to refer to the unit on whom the comparison is being performed."
category = TC_NOTHING
returns = group
[[.args]]
type = real
default = "512"
min = 0
[[.args]]
type = location
default = "GetRectCenter"
[[.args]]
type = boolexpr

[GetUnitsOfPlayerAll]
title = "Units Owned By Player"
description = "Units owned by ${Player}"
comment =""
category = TC_NOTHING
returns = group
[[.args]]
type = player
default = "Player00"

[GetUnitsOfPlayerAndTypeId]
title = "Units Owned By Player Of Type"
description = "Units owned by ${Player} of type ${Unit-Type}"
comment =""
category = TC_NOTHING
returns = group
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unitcode
default = "hfoo"

[GetUnitsOfPlayerMatching]
title = "Units Owned By Player Matching Condition"
description = "Units owned by ${Player} matching ${Condition}"
comment = "Use 'Matching Unit' to refer to the unit on whom the comparison is being performed."
category = TC_NOTHING
returns = group
[[.args]]
type = player
default = "Player00"
[[.args]]
type = boolexpr

[GetUnitsOfTypeIdAll]
title = "Units Of Type"
description = "Units of type ${Unit-Type}"
comment =""
category = TC_NOTHING
returns = group
[[.args]]
type = unitcode
default = "hfoo"

[GetUnitsSelectedAll]
title = "Units Selected"
description = "Units currently selected by ${Player}"
comment = "This should not be used in trigger conditions."
category = TC_NOTHING
returns = group
[[.args]]
type = player
default = "Player00"

[CreateForce]
title = "Create Player Group  [R]"
description = "Create Empty Player Group "
comment = "Create a Player Group ."
category = TC_NOTHING
returns = force

[GetPlayersAll]
title = "All Players"
description = "All players"
comment = "Includes unused and neutral players."
category = TC_NOTHING
returns = force

[GetPlayersByMapControl]
title = "All Players Of Control"
description = "All players controlled by a ${Control Type} player"
comment =""
category = TC_NOTHING
returns = force
[[.args]]
type = mapcontrol
default = "MapControlComputer"

[GetPlayersMatching]
title = "All Players Matching Condition"
description = "All players matching ${Condition}"
comment = "Use 'Matching Player' to refer to the player on whom the comparison is being performed.  This includes unused and neutral players."
category = TC_NOTHING
returns = force
[[.args]]
type = boolexpr

[GetPlayersAllies]
title = "Allies Of Player"
description = "All allies of ${Player}"
comment = "All allies of the specified player, including him/herself."
category = TC_NOTHING
returns = force
[[.args]]
type = player
default = "Player00"

[GetPlayersEnemies]
title = "Enemies Of Player"
description = "All enemies of ${Player}"
comment = "All enemies of the specified player."
category = TC_NOTHING
returns = force
[[.args]]
type = player
default = "Player00"

[GetForceOfPlayer]
title = "Convert Player To Player Group"
description = "Player group(${Player})"
comment =""
category = TC_NOTHING
returns = force
[[.args]]
type = player
default = "Player00"

[GetPlayerRace]
title = "Race Of Player"
description = "Race of ${Player}"
comment =""
category = TC_NOTHING
returns = race
[[.args]]
type = player
default = "Player00"

[GetUnitRace]
title = "Race Of Unit"
description = "Race of ${Unit}"
comment =""
category = TC_NOTHING
returns = race
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetCurrentCameraSetup]
title = "Current Camera"
description = "Current camera"
comment =""
category = TC_NOTHING
returns = camerasetup

[CreateFogModifierRect]
title = "Create Fog Modifier (Rect) [R]"
description = "Create  Fog Modifier for ${Player}. Visible: ${FogStateVisible}, Rect: ${Rect} (For allies ${share} view, ${overwrite} unit view)"
comment = "Create a Fog Modifier ."
category = TC_NOTHING
returns = fogmodifier
[[.args]]
type = player
default = "Player00"
[[.args]]
type = fogstate
default = "FogStateVisible"
[[.args]]
type = rect
[[.args]]
type = sharevisionoption
default = "ShareVisionShare"
[[.args]]
type = converunitoption
default = "ConverUnitNot"

[CreateFogModifierRadius]
title = "Create Fog Modifier (Radius) [R]"
description = "Create Fog Modifier for ${Player} . Visible: ${FogStateVisible}, Center of Region:(${X},${Y}), Radius: ${value} (For allies ${share} view, ${overwrite} unit view)"
comment = "Create a Fog Modifier ."
category = TC_NOTHING
returns = fogmodifier
[[.args]]
type = player
default = "Player00"
[[.args]]
type = fogstate
default = "FogStateVisible"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "512"
[[.args]]
type = sharevisionoption
default = "ShareVisionShare"
[[.args]]
type = converunitoption
default = "ConverUnitNot"

[GetTriggeringTrigger]
title = "This Trigger"
description = "This trigger"
comment =""
category = TC_NOTHING
returns = trigger

[GetGameDifficulty]
title = "Difficulty Level"
description = "Difficulty level"
comment =""
category = TC_NOTHING
returns = gamedifficulty

[GetAIDifficulty]
title = "Melee AI Of Player"
description = "Melee AI of ${Player}"
comment =""
category = TC_NOTHING
returns = aidifficulty
[[.args]]
type = player
default = "Player00"

[GetGameSpeed]
title = "Current Game Speed"
description = "Current game speed"
comment =""
category = TC_NOTHING
returns = gamespeed

[GetPlayerController]
title = "Player Controller"
description = "${Player} controller"
comment =""
category = TC_NOTHING
returns = mapcontrol
[[.args]]
type = player
default = "Player00"

[GetPlayerColor]
title = "Color Of Player"
description = "Color of ${Player}"
comment =""
category = TC_NOTHING
returns = playercolor
[[.args]]
type = player
default = "Player00"

[GetPlayerSlotState]
title = "Player Slot Status"
description = "${Player} slot status"
comment =""
category = TC_NOTHING
returns = playerslotstate
[[.args]]
type = player
default = "Player00"

[AddSpecialEffect]
title = "Create Effect(At Coordinate) [R]"
description = "Create Effect ${Model File} at (${X},${Y})"
comment = "Create a Effect."
category = TC_NOTHING
returns = effect
[[.args]]
type = modelfile
default = "\"Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl\""
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[AddSpecialEffectLoc]
title = "Create Effect(At Point) [R]"
description = "Create Effect ${Model File} at ${Location}"
comment = "Create a Effect."
category = TC_NOTHING
returns = effect
[[.args]]
type = modelfile
default = "\"Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl\""
[[.args]]
type = location

[AddSpecialEffectTarget]
title = "Create Effect(At Unit) [R]"
description = "Create Effect ${Model File} and attach at ${Unit} on ${Attachment Point}"
comment = "Create a Effect."
category = TC_NOTHING
returns = effect
[[.args]]
type = modelfile
default = "\"Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl\""
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = string
default = "\"overhead\""

[AddSpellEffectById]
title = "Create Effect(Ability, At Coordinate) [R]"
description = "${Ability} with ${EffectType} , create at Coordinate(${X},${Y})"
comment = "Create a Effect."
category = TC_NOTHING
returns = effect
[[.args]]
type = abilcode
[[.args]]
type = effecttype
default = "EffectTypeEffect"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[AddSpellEffectByIdLoc]
title = "Create Effect(Ability, At Location) [R]"
description = "${Ability} with ${EffectType} , create at ${Location}"
comment = "Create a Effect."
category = TC_NOTHING
returns = effect
[[.args]]
type = abilcode
[[.args]]
type = effecttype
default = "EffectTypeEffect"
[[.args]]
type = location

[AddSpellEffectTargetById]
title = "Create Effect(Ability, At Unit) [R]"
description = "${Ability} with ${EffectType} , attach to ${Unit} on ${String}"
comment = "Create a Effect."
category = TC_NOTHING
returns = effect
[[.args]]
type = abilcode
[[.args]]
type = effecttype
default = "EffectTypeEffect"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = string
default = "\"overhead\""

[CreateImage]
title = "Create Image [R]"
description = " reate an image using: ${Image} of size:(${X},${Y},${Z}) at:(${X},${Y},${Z}) original point:(${X},${Y},${Z}) using image type: ${Type}"
comment = "Use 'Image - Change Render Always State' to toggle display of this image.  By default, images are not rendered.  The point specified is used as the bottom-left corner of the image.  Images need an alpha channel in order to be displayed properly."
category = TC_NOTHING
use_in_event = 0
returns = image
[[.args]]
type = string
default = "\"ReplaceableTextures\\Splats\\AuraRune9b.blp\""
[[.args]]
type = real
default = "256"
[[.args]]
type = real
default = "256"
[[.args]]
type = real
default = "256"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = imagetype
default = "ImageTypeIndicator"

[CreateUbersplat]
title = "Create Ubersplat [R]"
description = "Create ubersplat at(${X},${Y}) of type: ${Type}  with color(${Red},${Green},${Blue}) and  ${Transparency} transparency , (${Enable/Disable} paused state, ${Enble/Disable} skipping birth time)"
comment = "The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible.  Use 'Ubersplat - Change Render Always State' to toggle display of this ubersplat.  By default, ubersplats are not rendered."
category = TC_NOTHING
use_in_event = 0
returns = ubersplat
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = ubersplattype
default = "UbersplatTypeNGOL"
[[.args]]
type = integer
default = "255"
[[.args]]
type = integer
default = "255"
[[.args]]
type = integer
default = "255"
[[.args]]
type = integer
default = "255"
[[.args]]
type = enabledisableoption
default = "EnableDisableDisable"
[[.args]]
type = enabledisableoption
default = "EnableDisableDisable"

[AddWeatherEffect]
title = "Create WeatherEffect [R]"
description = "Create at ${Rect} the weather effect ${WeatherId}"
comment = "Create a WeatherEffect."
category = TC_NOTHING
returns = weathereffect
[[.args]]
type = rect
[[.args]]
type = weathereffectcode

[TerrainDeformCrater]
title = "Create TerrainDeformCrater [R]"
description = "Create TerrainDeformCrater. Center:(${X},${Y}) Radius: ${Radius} Depth: ${Depth} Duration: ${Duration} Millisecond, Type: ${Type}"
comment = "Depth can be negative. Permanent terrain changes will not be recorded when saving games."
category = TC_NOTHING
returns = terraindeformation
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "512"
min = 0.01
[[.args]]
type = real
default = "96"
[[.args]]
type = integer
default = "4000"
min = 1
[[.args]]
type = cratertype
default = "CraterTypeTemporary"

[TerrainDeformRipple]
title = "Create TerrainDeformRipple [R]"
description = "Create TerrainDeformRipple, Center:(${X},${Y}) End Radius: ${Radius} Depth:${Depth} Duration: ${Duration} Millisecond, Count: ${Count} SpaceWave: ${SpaceWave} TimeWave: ${TimeWave} Start Radius Rate: ${value} Type: ${Type}"
comment = "Start raidus rate=Start Radius/End Radius."
category = TC_NOTHING
returns = terraindeformation
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "1024"
min = 0.01
[[.args]]
type = real
default = "96"
[[.args]]
type = integer
default = "1"
min = 1
[[.args]]
type = integer
default = "4000"
min = 1
[[.args]]
type = real
default = "4"
min = 0.01
[[.args]]
type = real
default = "16"
min = 0.01
[[.args]]
type = real
default = "1"
min = 0.01
[[.args]]
type = rippletype
default = "RippleTypeNormal"

[TerrainDeformWave]
title = "Create TerrainDeformWave [R]"
description = "Create TerrainDeformWave. Start Point:(${X},${Y}) Direction:(${X},${Y}) Distance: ${distance} Speed: ${speed} Radius: ${radius} Depth:${Depth} Delay: ${Delay} Millisecond, Count: ${Count}"
comment = "Depth can be negative. Direction formated as(X,Y), e.g. (1,1) means 45 degree."
category = TC_NOTHING
returns = terraindeformation
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "1"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "1024"
min = 0.01
[[.args]]
type = real
default = "1024"
min = 0.01
[[.args]]
type = real
default = "256"
min = 0.01
[[.args]]
type = real
default = "96"
min = 0.01
[[.args]]
type = integer
default = "1000"
min = 1
[[.args]]
type = integer
default = "1"
min = 1

[TerrainDeformRandom]
title = "Create TerrainDeformRandom [R]"
description = "Create TerrainDeformRandom, Center:(${X},${Y}) Radius: ${Radius} Min Depth: ${Depth} Max Depth: ${Depth} Duration: ${Duration} Millisecond, Period: ${Duration} Millisecond"
comment = ""
category = TC_NOTHING
returns = terraindeformation
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "1024"
min = 0.01
[[.args]]
type = real
default = "-96"
[[.args]]
type = real
default = "96"
[[.args]]
type = integer
default = "4000"
min = 1
[[.args]]
type = integer
default = "100"
min = 1

[DialogAddButton]
title = "Create Dialog Button [R]"
description = "Create a dialog button for ${Dialog} labelled ${text} with hotkey: ${HotKey}"
comment = "Create a Dialog Button."
category = TC_NOTHING
returns = button
[[.args]]
type = dialog
default = "GetClickedDialogBJ"
[[.args]]
type = StringExt
[[.args]]
type = hotkeyint
default = "HotKeyNull"

[CreateLeaderboard]
title = "Create Leaderboard [R]"
description = "Create a empty Leaderboard"
comment = "Create a Leaderboard."
category = TC_NOTHING
returns = leaderboard

[PlayerGetLeaderboardBJ]
title = "Leaderboard Of Player"
description = "Leaderboard of ${Player}"
comment = "Each player can have at most one leaderboard."
script_name = PlayerGetLeaderboard
category = TC_NOTHING
returns = leaderboard
[[.args]]
type = player
default = "Player00"

[CreateMultiboard]
title = "Create Multi Board [R]"
description = "Create a empty Multi Board"
comment = "Create a Multi Board."
category = TC_NOTHING
use_in_event = 0
returns = multiboard

[MultiboardGetItem]
title = "Multi Board Item [R]"
description = "Get item at ${Multi Board} in row ${X} column ${Y}"
comment = "(0,0)is the first Multi Board item,Create a Multi Board Item."
category = TC_NOTHING
use_in_event = 0
returns = multiboarditem
[[.args]]
type = multiboard
default = "bj_lastCreatedMultiboard"
[[.args]]
type = integer
default = "0"
[[.args]]
type = integer
default = "0"

[YDWECreateMover]
title = "YDWE Create Mover"
description = "Create a mover"
category = TC_NOTHING
returns = mover

[CreateTimer]
title = "Create Timer [R]"
description = "Create a Timer"
comment = "Create a Timer."
category = TC_NOTHING
returns = timer

[YDWERemoveAttackWaveReturnTimer]
title = "YDWE Last Created Wave Timer[YDWE]"
description = "Last Created Wave Timer"
comment = "Response the Wave System"
category = TC_NOTHING
returns = timer

["            "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = timer
[[.args]]
type = scriptcode

[CreateTrackable]
title = "Create Trackable [R]"
description = "Create Trackable, with Model: ${model name} , locate at: ( ${X} , ${Y}) facing to: ${value} degree"
comment = "Can use for get mouse event. Create a Trackable."
category = TC_NOTHING
returns = trackable
[[.args]]
type = modelfile
default = "\"Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdl\""
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = degree
default = "0"

["              "]
title = "Custom Script"
description = "Script: ${Jass Script}"
comment = "Input a line of jass script"
category = TC_YDHIDE
returns = hashtable
[[.args]]
type = scriptcode

[CreateTextTag]
title = "Create Text Tag [R]"
description = "Create Text Tag"
comment = "Create a Text Tag."
category = TC_NOTHING
use_in_event = 0
returns = texttag

[" UnitAddAbility"]
title = "Unit Add Ability [C]"
description = "For ${Unit} add ${Ability}"
comment = "Return true if add success."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = abilcode

[" UnitRemoveAbility"]
title = "Unit Remove Ability [C]"
description = "For ${Unit} remove ${Ability}"
comment = "Return true if remove success."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = abilcode

[IssueImmediateOrder]
title = "Issue Order With No Target"
description = "Order ${Unit} to ${Order}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitordernotarg
default = "UnitOrderStop"

[IssuePointOrder]
title = "Issue Order Targeting A Point (Coordinate)"
description = "Order ${Unit} to ${Order} (${X},${Y})"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderptarg
default = "UnitOrderMove"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[IssuePointOrderLoc]
title = "Issue Order Targeting A Point (Location)"
description = "Order ${Unit} to ${Order} ${Location}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderptarg
default = "UnitOrderMove"
[[.args]]
type = location

[IssueTargetOrder]
title = "Issue Order Targeting A Unit"
description = "Order ${Unit} to ${Order} ${Unit}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderutarg
default = "UnitOrderAttackUnit"
[[.args]]
type = unit

[IssueTargetDestructableOrder]
title = "Issue Order Targeting A Destructable"
description = "Order ${Unit} to ${Order} ${Destructable}"
comment = ""
script_name = IssueTargetOrder
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderdtarg
default = "UnitOrderHarvestDestructable"
[[.args]]
type = destructable

[IssueTargetItemOrder]
title = "Issue Order Targeting An Item"
description = "Order ${Unit} to ${Order} ${Item}"
comment = ""
script_name = IssueTargetOrder
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderitarg
default = "UnitOrderSmartItem"
[[.args]]
type = item

[IssueImmediateOrderById]
title = "Issue Order With No Target(ID)"
description = "Order ${Unit} with Order ID ${Order}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodenotarg
default = "OrderCodeStop"

[IssuePointOrderById]
title = "Issue Order Targeting A Point (Coordinate)(ID)"
description = "Order ${Unit} with Order ID ${Order} (${X},${Y})"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodeptarg
default = "OrderCodeMove"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[IssuePointOrderByIdLoc]
title = "Issue Order Targeting A Point (Location)(ID)"
description = "Order ${Unit} with Order ID ${Order} ${Location}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodeptarg
default = "OrderCodeMove"
[[.args]]
type = location

[IssueTargetOrderById]
title = "Issue Order Targeting A Unit (ID)"
description = "Order ${Unit} with Order ID ${Order} ${Unit}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodeutarg
default = "OrderCodeAttackUnit"
[[.args]]
type = unit

[IssueTargetDestructableOrderById]
title = "Issue Order Targeting A Destructable(ID)"
description = "Order ${Unit} with Order ID ${Order} ${Destructable}"
comment = ""
script_name = IssueTargetOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodedtarg
default = "OrderCodeHarvestDestructable"
[[.args]]
type = destructable

[IssueTargetItemOrderById]
title = "Issue Order Targeting An Item(ID)"
description = "Order ${Unit} with Order ID ${Order} ${Item}"
comment = ""
script_name = IssueTargetOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodeitarg
default = "OrderCodeSmartItem"
[[.args]]
type = item

[IssueNeutralImmediateOrder]
title = "Issue Neutral Order Targeting With No Target"
description = "${Player} order ${Unit} with Order ID ${Order}"
comment = "Can be used to issue orders to other player's units."
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitordernotarg
default = "UnitOrderStop"

[IssueNeutralPointOrder]
title = "Issue Neutral Order Targeting A Point (Coordinate)"
description = "${Player} order ${Unit} to ${Order} (${X},${Y})"
comment = "Can be used to issue orders to other player's units."
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderptarg
default = "UnitOrderNeutralDetectAOE"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[IssueNeutralTargetOrder]
title = "Issue Neutral Order Targeting A Unit"
description = "${Player} order ${Unit} to ${Order} ${Unit}"
comment = "Can be used to issue orders to other player's units."
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderutarg
default = "UnitOrderNeutralInterAct"
[[.args]]
type = unit

[IssueNeutralTargetDestructableOrder]
title = "Issue Neutral Order Targeting A Destructable"
description = "${Player} order ${Unit} to ${Order} ${Destructable}"
comment = "Can be used to issue orders to other player's units."
script_name = IssueNeutralTargetOrder
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderdtarg
default = "UnitOrderHarvestDestructable"
[[.args]]
type = destructable

[IssueNeutralTargetItemOrder]
title = "Issue Neutral Order Targeting An Item"
description = "${Player} order ${Unit} to ${Order} ${Item}"
comment = "Can be used to issue orders to other player's units."
script_name = IssueNeutralTargetOrder
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitorderitarg
default = "UnitOrderSmartItem"
[[.args]]
type = item

[IssueNeutralImmediateOrderById]
title = "Issue Neutral Order Targeting  With No Target (ID)"
description = "${Player} order ${Unit} with Order ID ${Order}"
comment = "Can be used to issue orders to other player's units."
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodenotarg
default = "OrderCodeStop"

[IssueNeutralPointOrderById]
title = "Issue Neutral Order Targeting A Point (Coordinate)(ID)"
description = "${Player} order ${Unit} with Order ID ${Order} (${X},${Y})"
comment = "Can be used to issue orders to other player's units."
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodeptarg
default = "OrderCodeNeutralDetectAOE"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[IssueNeutralTargetOrderById]
title = "Issue Neutral Order Targeting A Unit(ID)"
description = "${Player} order ${Unit} with Order ID ${Order} ${Unit}"
comment = "Can be used to issue orders to other player's units."
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodeutarg
default = "OrderCodeNeutralInterAct"
[[.args]]
type = unit

[IssueNeutralTargetDestructableOrderById]
title = "Issue Neutral Order Targeting A Destructable(ID)"
description = "${Player} order ${Unit} with Order ID ${Order} ${Destructable}"
comment = "Can be used to issue orders to other player's units."
script_name = IssueNeutralTargetOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodedtarg
default = "OrderCodeHarvestDestructable"
[[.args]]
type = destructable

[IssueNeutralTargetItemOrderById]
title = "Issue Neutral Order Targeting An Item(ID)"
description = "${Player} order ${Unit} with Order ID ${Order} ${Item}"
comment = "Can be used to issue orders to other player's units."
script_name = IssueNeutralTargetOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercodeitarg
default = "OrderCodeSmartItem"
[[.args]]
type = item

[YDWEIssueNeutralImmediateOrderById]
title = "YDWE Issue Neutral Order Targeting With No Target"
description = "${Player} order ${Unit} ${Order}"
comment = "Can be used to issue orders to other player's units. Use integer order id directly."
script_name = IssueNeutralImmediateOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercode
default = YDWEAbilityId2OrderId

[YDWEIssueNeutralPointOrderById]
title = "YDWE Issue Neutral Order Targeting A Point (Coordinate)(ID)"
description = "${Player} order ${Unit} with Order ID ${Order} (${X},${Y})"
comment = "Can be used to issue orders to other player's units. Use integer order id directly."
script_name = IssueNeutralPointOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercode
default = YDWEAbilityId2OrderId
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[YDWEIssueNeutralTargetOrderById]
title = "YDWE Issue Neutral Order Targeting A Unit(ID)"
description = "${Player} order ${Unit} with Order ID ${Order} ${Unit}"
comment = "Can be used to issue orders to other player's units. Use integer order id directly."
script_name = IssueNeutralTargetOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercode
default = YDWEAbilityId2OrderId
[[.args]]
type = unit

[YDWEIssueNeutralTargetDestructableOrderById]
title = "YDWE Issue Neutral Order Targeting A Destructable(ID)"
description = "${Player} order ${Unit} with Order ID ${Order} ${Destructable}"
comment = "Can be used to issue orders to other player's units. Use integer order id directly."
script_name = IssueNeutralTargetOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercode
default = YDWEAbilityId2OrderId
[[.args]]
type = destructable

[YDWEIssueNeutralTargetItemOrderById]
title = "YDWE Issue Neutral Order Targeting An Item(ID)"
description = "${Player} order ${Unit} with Order ID ${Order} ${Item}"
comment = "Can be used to issue orders to other player's units. Use integer order id directly."
script_name = IssueNeutralTargetOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = ordercode
default = YDWEAbilityId2OrderId
[[.args]]
type = item

[IssueTrainOrderByIdBJ]
title = "Issue Train/Upgrade Order"
description = "Order ${Unit} to train/upgrade to a ${Unit-Type}"
comment = "This action can be used to order a unit to upgrade itself.  A Town Hall, for example, can be upgraded by ordering it to train a Keep."
script_name = IssueImmediateOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitcode
default = "hfoo"

[IssueUpgradeOrderByIdBJ]
title = "Issue Research Order"
description = "Order ${Unit} to research ${Tech-Type}"
comment = "Weapons and armor upgrades can be researched multiple times via this trigger action."
script_name = IssueImmediateOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = techcode
default = "Rhde"

[IssueBuildOrderById]
title = "Issue Build Order (Coordinate)[R]"
description = "Order ${Unit} to build a ${Unit-Type}  at:(${X},${Y})"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitcode
default = "hbar"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[IssueBuildOrderByIdLocBJ]
title = "Issue Build Order(Location)"
description = "Order ${Unit} to build a ${Unit-Type} at ${Location}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitcode
default = "hbar"
[[.args]]
type = location

[UnitDropItemPoint]
title = "Issue Drop Item Order (Coordinate) [R]"
description = "Order ${Unit} to drop ${Item} at (${X},${Y})"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = item
default = "bj_lastCreatedItem"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[UnitDropItemPointLoc]
title = "Issue Drop Item Order"
description = "Order ${Unit} to drop ${Item} at ${Location}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = item
default = "GetLastCreatedItem"
[[.args]]
type = location

[UnitDropItemSlot]
title = "Issue Move Item In Inventory Order [R]"
description = "${Unit} to move ${Item} to inventory slot ${Index}"
comment = "This only works if the unit is already carrying the item.  If an item exists in the slot, the items will be swapped. Notice: Item Slot Index in this function form 0 to 5, not 1 to 6."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = item
default = "bj_lastCreatedItem"
[[.args]]
type = integer
default = "0"
min = 0
max = 5

[UnitDropItemSlotBJ]
title = "Issue Move Item In Inventory Order"
description = "Order ${Unit} to move ${Item} to inventory slot ${Index}"
comment = "This only works if the unit is already carrying the item.  If an item exists in the slot, the items will be swapped."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = item
default = "GetLastCreatedItem"
[[.args]]
type = integer
default = "1"
min = 1
max = 6

[UnitDropItemTargetBJ]
title = "Issue Give Item Order"
description = "Order ${Unit} to give ${Item} to ${Unit}"
comment = ""
script_name = UnitDropItemTarget
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = item
default = "GetLastCreatedItem"
[[.args]]
type = unit

[IssueBuyUnitOrder]
title = "Issue Buy Unit [R]"
description = "${Player} buy from ${Unit}, bought unit type is ${Unit-Type}"
comment = ""
script_name = IssueNeutralImmediateOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitcode
default = "hfoo"

[IssueBuyItemOrder]
title = "Issue Buy Item [R]"
description = "${Player} buy from  ${Unit} bought item type is ${Item Type}"
comment = "First, the store will release the 'Neutral Shop - Select' command to the players' units, and then use the function to achieve the purchase of the designated units."
script_name = IssueNeutralImmediateOrderById
category = TC_UNIT
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = itemcode
default = "ckng"

[UnitDamagePoint]
title = "Damage Area [R]"
description = "Cause ${Unit} to damage circular area after ${Seconds} seconds of radius ${Size} at (${X},${Y}), dealing ${Amount} damage of (${yes/no} attack damage, ${yes/no} range damage) attack type ${AttackType}, damage type ${DamageType} and  weaponType ${WeaponType}"
comment = "This does not interrupt the unit's orders.  The source unit gets credit for kills resulting from this damage."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "500"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "100"
[[.args]]
type = isnotoption
default = "IsNotIs"
[[.args]]
type = isnotoption
default = "IsNotNot"
[[.args]]
type = attacktype
default = "AttackTypeNormal"
[[.args]]
type = damagetype
default = "DamageTypeNormal"
[[.args]]
type = weapontype
default = "WEAPON_TYPE_WHOKNOWS"

[UnitDamagePointLoc]
title = "Damage Area"
description = "Cause ${Unit} to damage circular area after ${Seconds} seconds of radius ${Size} at ${Location}, dealing ${Amount} damage of attack type ${AttackType} and damage type ${DamageType}"
comment = "This does not interrupt the unit's orders.  The source unit gets credit for kills resulting from this damage."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "500"
[[.args]]
type = location
default = "GetRectCenter"
[[.args]]
type = real
default = "100"
[[.args]]
type = attacktype
default = "AttackTypeNormal"
[[.args]]
type = damagetype
default = "DamageTypeNormal"

[UnitDamageTarget]
title = "Damage Target [R]"
description = "Cause ${Unit} to damage ${Target}, dealing ${Amount} damage of (${yes/no} attack damage, ${yes/no} range damage) attack type ${AttackType}, damage type ${DamageType} and  weaponType ${WeaponType}"
comment = "This does not interrupt the unit's orders.  The source unit gets credit for kills resulting from this damage."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = real
default = "500"
[[.args]]
type = isnotoption
default = "IsNotIs"
[[.args]]
type = isnotoption
default = "IsNotNot"
[[.args]]
type = attacktype
default = "AttackTypeNormal"
[[.args]]
type = damagetype
default = "DamageTypeNormal"
[[.args]]
type = weapontype
default = "WEAPON_TYPE_WHOKNOWS"

[UnitDamageTargetBJ]
title = "Damage Target"
description = "Cause ${Unit} to damage ${Target}, dealing ${Amount} damage of attack type ${AttackType} and damage type ${DamageType}"
comment = "This does not interrupt the unit's orders.  The source unit gets credit for kills resulting from this damage."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = real
default = "500"
[[.args]]
type = attacktype
default = "AttackTypeNormal"
[[.args]]
type = damagetype
default = "DamageTypeNormal"

[IsUnit]
title = "Is Unit The Same"
description = "${Unit} equal ${Unit}"
comment = "It is used to judge whether the two units are equal."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unit
default = "GetLastCreatedUnit"

[IsUnitDetected]
title = "Is Unit Detected"
description = "${Unit} is in the real field of vision of ${Player}"
comment = "It is used to judge the unit in the Player anti invisibility range. Note: does not contain the anti hiding scope of the Player alliance."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsUnitType]
title = "Unit Classification Check"
description = "${Unit} is ${Type}"
comment =""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unittype
default = "UnitTypeStructure"

[IsUnitRace]
title = "Is Unit Race"
description = "${Unit} is ${Race}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = race
default = "RaceHuman"

[IsUnitIdType]
title = "Unit-Type Classification Check"
description = "${Unit-Type} is ${Type}"
comment =""
category = TC_UNIT
returns = boolean
[[.args]]
type = unitcode
default = "GetUnitTypeId"
[[.args]]
type = unittype
default = "UnitTypeStructure"

[IsHeroUnitId]
title = "Is Unit A Hero"
description = "${UnitType} is a hero"
category = TC_UNIT
returns = boolean
[[.args]]
type = unitcode
default = "hfoo"

[IsUnitInGroup]
title = "Unit In Unit Group"
description = "${Unit} is in ${Unit Group}"
comment =""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = group

[IsUnitInRange]
title = "Is Unit In Range Of Unit [R]"
description = "Is ${Unit} in the range of ${Unit}, range radius is ${radius}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unit
[[.args]]
type = real
default = "600"

[IsUnitInRangeXY]
title = "Is Unit In Range (Coordinate)[R]"
description = "Is ${Unit} in the range that its center is (${X},${Y}), radius is ${radius}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "600"

[IsUnitInRangeLoc]
title = "Is Unit In Range (Location)[R]"
description = "Is ${Unit}  in the range that its center is ${Location}, radius is ${radius}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = location
[[.args]]
type = real
default = "600"

[RectContainsUnit]
title = "Unit In Region"
description = "${Region} contains ${Unit}"
comment =""
category = TC_UNIT
returns = boolean
[[.args]]
type = rect
default = "GetPlayableMapRect"
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsUnitInRegion]
title = "Is Unit in Region [R]"
description = "Region ${Region} contains ${Unit}"
comment = ""
category = TC_UNIT
returns = boolean
[[.args]]
type = region
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsUnitAliveBJ]
title = "Unit Is Alive"
description = "${Unit} is alive"
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsUnitDeadBJ]
title = "Unit Is Dead"
description = "${Unit} is dead"
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsUnitPausedBJ]
title = "Unit Is Paused"
description = "${Unit} is paused"
comment =""
script_name = IsUnitPaused
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsUnitHiddenBJ]
title = "Unit Is Hidden"
description = "${Unit} is hidden"
comment = "A unit can be hidden with the 'Unit - Hide' trigger action, or by placing the unit into a transport, Soul Gem, altar, etc."
script_name = IsUnitHidden
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsUnitIllusionBJ]
title = "Unit Is An Illusion"
description = "${Unit} is an illusion"
comment =""
script_name = IsUnitIllusion
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[UnitCanSleepPerm]
title = "Unit Sleeps"
description = "${Unit} sleeps when unprovoked"
comment = "Units owned by players 1 through 12 never sleep."
script_name = UnitCanSleepPerm
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[UnitCanSleepBJ]
title = "Unit Sleeps At Night"
description = "${Unit} sleeps when unprovoked at night"
comment = "Units owned by players 1 through 12 never sleep."
script_name = UnitCanSleep
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[UnitIsSleepingBJ]
title = "Unit Is Sleeping"
description = "${Unit} is sleeping"
comment = "Units owned by players 1 through 12 never sleep."
script_name = UnitIsSleeping
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[DoesUnitGenerateAlarms]
title = "Unit Generates Alarms"
description = "${Unit} generates alarms"
comment =""
category = TC_UNIT
use_in_event = 0
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsUnitLoadedBJ]
title = "Unit Is Being Transported"
description = "${Unit} is being transported"
comment =""
script_name = IsUnitLoaded
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsUnitInTransportBJ]
title = "Unit Is In Transport"
description = "${Unit} is loaded into ${Transport}"
comment =""
script_name = IsUnitInTransport
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unit

[IsUnitSelected]
title = "Unit Selected By Player"
description = "${Unit} is selected by ${Player}"
comment =""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsUnitAlly]
title = "Unit Belongs To An Ally Of Player"
description = "${Unit} belongs to an ally of ${Player}"
comment =""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsUnitEnemy]
title = "Unit Belongs To An Enemy Of Player"
description = "${Unit} belongs to an enemy of ${Player}"
comment =""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsUnitOwnedByPlayer]
title = "Is Unit Owned By Player"
description = "${Unit} belongs ${Player}"
comment = "Determine whether the unit belongs to a player."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsUnitInForce]
title = "Is Unit Owned By Player In Group"
description = "${Unit} belongs player in ${Player Group}"
comment = "Determine whether the unit belongs to a player in player group."
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = force
default = "GetPlayersAll"

[UnitHasBuffBJ]
title = "Unit Has Specific Buff"
description = "${Unit} has buff ${Buff}"
comment =""
category = TC_UNIT
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = buffcode

[CountUnitsInGroup]
title = "Count Units In Unit Group"
description = "Number of units in ${Unit Group}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = group
default = "GetUnitsInRectAll"

[CountLivingPlayerUnitsOfTypeId]
title = "Count Living Units Owned By Player"
description = "Number of living ${Unit-Type} units owned by ${Player}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = unitcode
default = "hfoo"
[[.args]]
type = player
default = "Player00"

[GetUnitFoodUsed]
title = "Supply Used By Unit"
description = "Supply used by ${Unit}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitFoodMade]
title = "Supply Provided By Unit"
description = "Supply provided by ${Unit}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetFoodUsed]
title = "Supply Used By Unit-Type"
description = "Supply used by ${Unit-Type}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = unitcode
default = "hfoo"

[GetFoodMade]
title = "Supply Provided By Unit-Type"
description = "Supply provided by ${Unit-Type}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = unitcode
default = "hfoo"

[GetUnitPointValue]
title = "Point-Value Of Unit"
description = "Point-value of ${Unit}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitPointValueByType]
title = "Point-Value Of Unit-Type"
description = "Point-value of ${Unit-Type}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = unitcode
default = "hfoo"

[GetUnitUserData]
title = "Custom Value Of Unit"
description = "Custom value of ${Unit}"
comment = "Use 'Unit - Set Custom Value' to set the custom value of a unit."
category = TC_UNIT
returns = integer
[[.args]]
type = unit

[GetUnitLevel]
title = "Level Of Unit"
description = "Level of ${Unit}"
comment = "This may be used for heroes and regular units."
category = TC_UNIT
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitAbilityLevel]
title = "Get Ability Level Of Unit [R]"
description = " Get level from ${Unit} of ${Ability}"
comment = "If unit do not have the ability, returns 0"
category = TC_UNIT
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = abilcode

[GetUnitAbilityLevelSwapped]
title = "Level Of Ability For Unit"
description = "Level of ${Ability} for ${Unit}"
comment = "If the unit does not have the ability, the result will be zero."
category = TC_UNIT
returns = integer
[[.args]]
type = abilcode
[[.args]]
type = unit
default = "GetTriggerUnit"

[UnitInventoryCount]
title = "Count Items Carried"
description = "Number of items carried by ${Unit}"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[UnitInventorySizeBJ]
title = "Size of Inventory"
description = "Size of inventory for ${Unit}"
comment =""
script_name = UnitInventorySize
category = TC_UNIT
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[UnitCountBuffsEx]
title = "Unit Count Buffs Ex [R]"
description = "Buffs count of ${Unit}, (${Include/Exclude} positive buffs, ${Include/Exclude} negative buffs , ${Include/Exclude} magic buffs, ${Include/Exclude} physical buffs${Include/Exclude} life cycle, ${Include/Exclude} aura buffs ${Include/Exclude} dispelled buffs)"
comment = ""
category = TC_UNIT
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = includeoption
default = "InclusionInclude"
[[.args]]
type = includeoption
default = "InclusionInclude"
[[.args]]
type = includeoptionnot
default = "InclusionIncludeNot"
[[.args]]
type = includeoptionnot
default = "InclusionIncludeNot"
[[.args]]
type = includeoption
default = "InclusionInclude"
[[.args]]
type = includeoption
default = "InclusionInclude"
[[.args]]
type = includeoptionnot
default = "InclusionIncludeNot"

[UnitCountBuffsExBJ]
title = "Count Buffs By Type"
description = "Number of ${Buff Type} buffs considered ${Buff Resist} on ${Unit} (${Include/Exclude} expiration timers, ${Include/Exclude} auras)"
comment =""
category = TC_UNIT
returns = integer
[[.args]]
type = buffpolarity
default = "BuffPolarityEither"
[[.args]]
type = buffresist
default = "BuffResistEither"
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = includeoption
default = "InclusionInclude"
[[.args]]
type = includeoption
default = "InclusionInclude"

[GetUnitState]
title = "Get Unit State [R]"
description = "${Unit} with ${Property}"
comment = ""
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = unitstate
default = "UnitStateLife"

[GetUnitStateSwap]
title = "Property"
description = "${Property} of ${Unit}"
comment =""
category = TC_UNIT
returns = real
[[.args]]
type = unitstate
default = "UnitStateLife"
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitLifePercent]
title = "Percentage Life"
description = "Percentage life of ${Unit}"
comment =""
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitManaPercent]
title = "Percentage Mana"
description = "Percentage mana of ${Unit}"
comment =""
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitX]
title = "Get Unit X [R]"
description = "X axis value of ${Unit}"
comment = ""
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitY]
title = "Get Unit Y [R]"
description = "Y axis value of ${Unit}"
comment = ""
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitFacing]
title = "Facing Angle"
description = "Facing of ${Unit}"
comment = "The angle returned is in degrees, with 0 facing east."
category = TC_UNIT
returns = degree
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitMoveSpeed]
title = "Movement Speed (Current)"
description = "Current movement speed of ${Unit}"
comment = "Movement speeds commonly range from 150 to 300."
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitDefaultMoveSpeed]
title = "Movement Speed (Default)"
description = "Default movement speed of ${Unit}"
comment = "Movement speeds commonly range from 150 to 300."
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitAcquireRange]
title = "Acquisition Range (Current)"
description = "Current acquisition range of ${Unit}"
comment =""
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitDefaultAcquireRange]
title = "Acquisition Range (Default)"
description = "Default acquisition range of ${Unit}"
comment =""
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitTurnSpeed]
title = "Turn Speed (Current)"
description = "Current turn speed of ${Unit}"
comment = "A unit's turn speed determines how quickly the unit changes direction.  Turn speed values are expected to be between 0 and 1, with smaller numbers indicating slower turning rates."
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitDefaultTurnSpeed]
title = "Turn Speed (Default)"
description = "Default turn speed of ${Unit}"
comment = "A unit's turn speed determines how quickly the unit changes direction.  Turn speed values are expected to be between 0 and 1, with smaller numbers indicating slower turning rates."
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitPropWindow]
title = "Prop Window Angle (Radian) [R]"
description = "Current prop window angle of ${Unit} (Radian)"
comment = ""
category = TC_UNIT
returns = radian
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitPropWindowBJ]
title = "Prop Window Angle (Current)"
description = "Current prop window angle of ${Unit}"
comment =""
category = TC_UNIT
returns = degree
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitDefaultPropWindowBJ]
title = "Prop Window Angle (Default)"
description = "Default prop window angle of ${Unit}"
comment =""
script_name = GetUnitDefaultPropWindow
category = TC_UNIT
returns = degree
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitFlyHeight]
title = "Flying Height (Current)"
description = "Current flying height of ${Unit}"
comment = "Only flying units use flying heights."
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitDefaultFlyHeight]
title = "Flying Height (Default)"
description = "Default flying height of ${Unit}"
comment =""
category = TC_UNIT
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitName]
title = "Unit Name"
description = "Name of ${Unit}"
comment = "This returns the internal name of a unit, not the proper name of units or Heroes."
category = TC_UNIT
returns = string
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitLoc]
title = "Position Of Unit"
description = "Position of ${Unit}"
comment =""
category = TC_UNIT
returns = location
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitRallyPoint]
title = "Rally-Point As Point"
description = "Rally-Point of ${Unit} as a point"
comment = "If the unit has no rally-point set, the result will be (0,0)"
category = TC_UNIT
returns = location
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitRallyUnit]
title = "Rally-Point As Unit"
description = "Rally-Point of ${Unit} as a unit"
comment = "If the unit does not have a rally-point set to a unit, this will return 'No unit'."
category = TC_UNIT
use_in_event = 0
returns = unit
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitCurrentOrder]
title = "Current Order Of Unit"
description = "Current order of ${Unit}"
comment =""
category = TC_UNIT
use_in_event = 0
returns = ordercode
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetUnitRallyDestructable]
title = "Rally-Point As Destructable"
description = "Rally-Point of ${Unit} as a Destructable"
comment = "If the unit does not have a rally-point set to a Destructable, this will return 'No Destructable'."
category = TC_UNIT
use_in_event = 0
returns = destructable
[[.args]]
type = unit
default = "GetTriggerUnit"

[" CreateNUnitsAtLoc"]
title = "Create Units Facing Angle [C]"
description = "Create ${Number} ${Unit} for ${Player} at ${Point} facing ${Direction} degrees"
comment = "The facing angle is expected in degrees, with 0 being east and 90 being north.  Use 'Last Created Unit Group' to refer to these created units.  Use 'Last Created Unit' to refer to exactly one of these units."
category = TC_UNIT
returns = group
[[.args]]
type = integer
default = "1"
min = 1
[[.args]]
type = unitcode
default = "hfoo"
[[.args]]
type = player
default = "Player00"
[[.args]]
type = location
[[.args]]
type = degree
default = "RealUnitFacing"
min = 0
max = 360

[IsTriggerEnabled]
title = "Trigger Is On"
description = "${Trigger} is on"
comment =""
category = TC_TRIGGER
returns = boolean
[[.args]]
type = trigger
default = "GetTriggeringTrigger"

[TriggerEvaluate]
title = "Evaluate Trigger Conditions"
description = "Evaluate ${Trigger} conditions"
comment =""
category = TC_TRIGGER
returns = boolean
[[.args]]
type = trigger

[IsTriggerQueuedBJ]
title = "Trigger Is Queued"
description = "${Trigger} is queued"
comment = "Use 'Trigger - Add To Trigger Queue' and 'Trigger - Remove From Trigger Queue' to manipulate the trigger queue."
category = TC_TRIGGER
returns = boolean
[[.args]]
type = trigger

[IsTriggerQueueEmptyBJ]
title = "Trigger Queue Is Empty"
description = "The trigger queue is empty"
comment = "Use 'Trigger - Add To Trigger Queue' and 'Trigger - Remove From Trigger Queue' to manipulate the trigger queue."
category = TC_TRIGGER
returns = boolean

[GetTriggerEvalCount]
title = "Trigger Evaluation Count"
description = "Evaluation count of ${Trigger}"
comment =""
category = TC_TRIGGER
returns = integer
[[.args]]
type = trigger
default = "GetTriggeringTrigger"

[GetTriggerExecCount]
title = "Trigger Execution Count"
description = "Execution count of ${Trigger}"
comment =""
category = TC_TRIGGER
returns = integer
[[.args]]
type = trigger
default = "GetTriggeringTrigger"

[QueuedTriggerCountBJ]
title = "Count Triggers In Trigger Queue"
description = "Number of triggers in the trigger queue"
comment = "Use 'Trigger - Add To Trigger Queue' and 'Trigger - Remove From Trigger Queue' to manipulate the trigger queue."
category = TC_TRIGGER
returns = integer

[GetTriggerName]
title = "Trigger Name"
description = "Name of the current trigger"
comment = "Returns the name, as entered in the editor, of the trigger which contains this function."
category = TC_TRIGGER
returns = string

[CreateTrigger]
title = "Create Trigger  [R]"
description = "Create Trigger "
comment = "Create a new Trigger, if you are not familiar with the function, please use it carefully."
category = TC_TRIGGER
returns = trigger

[IsUnitGroupEmptyBJ]
title = "Unit Group Is Empty"
description = "${Unit Group} is empty"
comment = "This is true if the unit group contains no units."
category = TC_UNITGROUP
returns = boolean
[[.args]]
type = group

[IsUnitGroupInRectBJ]
title = "Units Of Unit Group Are In Region"
description = "All units of ${Unit Group} are in ${Region}"
comment = "This is true if every unit in the unit group is in the given region."
category = TC_UNITGROUP
returns = boolean
[[.args]]
type = group
[[.args]]
type = rect

[IsUnitGroupDeadBJ]
title = "Units Of Unit Group Are Dead"
description = "All units of ${Unit Group} are dead"
comment = "This is true if every unit in the unit group is dead."
category = TC_UNITGROUP
returns = boolean
[[.args]]
type = group

[IsMultiboardDisplayed]
title = "Multiboard Is Showing"
description = "${Multiboard} is showing"
comment =""
category = TC_MULTIBOARD
use_in_event = 0
returns = boolean
[[.args]]
type = multiboard
default = "GetLastCreatedMultiboard"

[IsMultiboardMinimized]
title = "Multiboard Is Minimized"
description = "${Multiboard} is minimized"
comment =""
category = TC_MULTIBOARD
use_in_event = 0
returns = boolean
[[.args]]
type = multiboard
default = "GetLastCreatedMultiboard"

[MultiboardGetRowCount]
title = "Row Count"
description = "Number of rows in ${Multiboard}"
comment =""
category = TC_MULTIBOARD
returns = integer
[[.args]]
type = multiboard
default = "GetLastCreatedMultiboard"

[MultiboardGetColumnCount]
title = "Column Count"
description = "Number of columns in ${Multiboard}"
comment =""
category = TC_MULTIBOARD
returns = integer
[[.args]]
type = multiboard
default = "GetLastCreatedMultiboard"

[MultiboardGetTitleText]
title = "Multiboard Title"
description = "Title of ${Multiboard}"
comment =""
category = TC_MULTIBOARD
returns = string
[[.args]]
type = multiboard
default = "GetLastCreatedMultiboard"

[IsPointBlighted]
title = "Point Is Blighted [R]"
description = "Locatio (${X},${Y}) is blighted"
comment = ""
category = TC_ENVIRONMENT
returns = boolean
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[IsPointBlightedBJ]
title = "Point Is Blighted"
description = "${Point} is blighted"
comment =""
category = TC_ENVIRONMENT
returns = boolean
[[.args]]
type = location

[IsTerrainPathable]
title = "Terrain Pathing Is Off(Coordinate) [R]"
description = "Terrain pathing at (${X},${Y}) of type ${Pathing Type} is off"
comment = "Terrain pathing is off if it is not pathable to the given pathing type.  For example, 'Buildability' is off if the pathing cell is unbuildable.  Use 'Environment - Turn Terrain Pathing On/Off' to change terrain pathing."
category = TC_ENVIRONMENT
returns = boolean
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = pathingtype
default = "PathingTypeWalkability"

[IsTerrainPathableBJ]
title = "Terrain Pathing Is Off"
description = "Terrain pathing at ${Location} of type ${Pathing Type} is off"
comment = "Terrain pathing is off if it is not pathable to the given pathing type.  For example, 'Buildability' is off if the pathing cell is unbuildable.  Use 'Environment - Turn Terrain Pathing On/Off' to change terrain pathing."
category = TC_ENVIRONMENT
returns = boolean
[[.args]]
type = location
[[.args]]
type = pathingtype
default = "PathingTypeWalkability"

[GetTerrainCliffLevel]
title = "Terrain Cliff Level(Coordinate) [R]"
description = "Terrain cliff level at (${X},${Y})"
comment = "Cliff level values start at zero."
category = TC_ENVIRONMENT
returns = integer
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[GetTerrainCliffLevelBJ]
title = "Terrain Cliff Level"
description = "Terrain cliff level at ${Location}"
comment = "Cliff level values start at zero."
category = TC_ENVIRONMENT
returns = integer
[[.args]]
type = location

[GetTerrainVariance]
title = "Terrain Variance(Coordinate) [R]"
description = "Terrain variance at (${X},${Y})"
comment = ""
category = TC_ENVIRONMENT
returns = integer
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[GetTerrainVarianceBJ]
title = "Terrain Variance"
description = "Terrain variance at ${Location}"
comment =""
category = TC_ENVIRONMENT
returns = integer
[[.args]]
type = location
default = "GetRectCenter"

[GetTerrainType]
title = "Terrain Type [R]"
description = "Terrain type at (${X},${Y})"
comment = ""
category = TC_ENVIRONMENT
returns = terraintype
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[GetTerrainTypeBJ]
title = "Terrain Type"
description = "Terrain type at ${Location}"
comment =""
category = TC_ENVIRONMENT
returns = terraintype
[[.args]]
type = location

[IsFogEnabled]
title = "Fog Of War Enabled"
description = "Fog of war is enabled"
comment =""
category = TC_VISIBILITY
returns = boolean

[IsFogMaskEnabled]
title = "Black Mask Enabled"
description = "Black mask is enabled"
comment =""
category = TC_VISIBILITY
returns = boolean

[IsUnitVisible]
title = "Unit Is Visible To Player"
description = "${Unit} is visible to ${Player}"
comment =""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsUnitInvisible]
title = "Unit Is Invisible To Player"
description = "${Unit} is invisible to ${Player}"
comment =""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsUnitFogged]
title = "Unit Fogged To Player"
description = "${Unit} is fogged to ${Player}"
comment =""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsUnitMasked]
title = "Unit Is Masked To Player"
description = "${Unit} is masked to ${Player}"
comment =""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = player
default = "Player00"

[IsLocationVisibleToPlayer]
title = "Point Visible To Player"
description = "${Point} is visible to ${Player}"
comment =""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = location
default = "GetRectCenter"
[[.args]]
type = player
default = "Player00"

[IsVisibleToPlayer]
title = "Coordinate Is Visible To Player"
description = "Location(${x},${y}) is visible to ${Player}"
comment = ""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = real
[[.args]]
type = real
[[.args]]
type = player
default = "Player00"

[IsLocationFoggedToPlayer]
title = "Point Fogged To Player"
description = "${Point} is fogged for ${Player}"
comment =""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = location
default = "GetRectCenter"
[[.args]]
type = player
default = "Player00"

[IsFoggedToPlayer]
title = "Coordinate Fogged To Player"
description = "(${x},${y}) is fogged for ${Player}"
comment = "The coordinates which is marked are not calculated."
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = real
[[.args]]
type = real
[[.args]]
type = player
default = "Player00"

[IsLocationMaskedToPlayer]
title = "Point Masked To Player"
description = "${Point} is masked for ${Player}"
comment =""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = location
default = "GetRectCenter"
[[.args]]
type = player
default = "Player00"

[IsMaskedToPlayer]
title = "Masked To Player"
description = "Coordinate (${x},${y}) is Masked to ${Player}"
comment = ""
category = TC_VISIBILITY
returns = boolean
[[.args]]
type = real
[[.args]]
type = real
[[.args]]
type = player
default = "Player00"

[IsDestructableAliveBJ]
title = "Destructable Is Alive"
description = "${Destructable} is alive"
comment =""
category = TC_DESTRUCT
returns = boolean
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[IsDestructableDeadBJ]
title = "Destructable Is Dead"
description = "${Destructable} is dead"
comment =""
category = TC_DESTRUCT
returns = boolean
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[IsDestructableInvulnerableBJ]
title = "Destructable Is Invulnerable"
description = "${Destructable} is invulnerable"
comment =""
script_name = IsDestructableInvulnerable
category = TC_DESTRUCT
returns = boolean
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[GetElevatorHeight]
title = "Elevator Height"
description = "Height of ${Elevator}"
comment = "An elevator's height can be changed using the 'Destructable - Set Elevator Height' action."
category = TC_DESTRUCT
returns = integer
[[.args]]
type = destructable

[GetDestructableLife]
title = "Life"
description = "Current life of ${Destructable}"
comment = "Destructables lose life when attacked or harvested.  Like units, Destructables die when their life reaches 0."
category = TC_DESTRUCT
returns = real
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[GetDestructableMaxLife]
title = "Max Life"
description = "Max life of ${Destructable}"
comment = "Destructables lose life when attacked or harvested.  Like units, Destructables die when their life reaches 0."
category = TC_DESTRUCT
returns = real
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[GetDestructableOccluderHeight]
title = "Occlusion Height"
description = "Occlusion height of ${Destructable}"
comment =""
category = TC_DESTRUCT
returns = real
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[GetDestructableX]
title = "Get Destructable X[R]"
description = "X axis value of ${Destructable}"
comment = ""
category = TC_DESTRUCT
returns = real
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[GetDestructableY]
title = "Get Destructable Y [R]"
description = "Y axis value of ${Destructable}"
category = TC_DESTRUCT
returns = real
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[GetDestructableName]
title = "Destructable Name"
description = "Name of ${Destructable}"
comment =""
category = TC_DESTRUCT
returns = string
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[GetDestructableLoc]
title = "Position Of Destructable"
description = "Position of ${Destructable}"
comment =""
category = TC_DESTRUCT
returns = location
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[LeaderboardHasPlayerItemBJ]
title = "Leaderboard Contains Player"
description = "${Leaderboard} contains ${Player}"
comment =""
script_name = LeaderboardHasPlayerItem
category = TC_LEADERBOARD
returns = boolean
[[.args]]
type = leaderboard
default = "GetLastCreatedLeaderboard"
[[.args]]
type = player
default = "Player00"

[LeaderboardGetPlayerIndexBJ]
title = "Leaderboard Position"
description = "Position of ${Player} in ${Leaderboard}"
comment =""
category = TC_LEADERBOARD
returns = integer
[[.args]]
type = player
default = "Player00"
[[.args]]
type = leaderboard
default = "GetLastCreatedLeaderboard"

[LeaderboardGetItemCount]
title = "Row Index of Item"
description = "Row index of item in ${Leaderboard}"
comment = ""
category = TC_LEADERBOARD
returns = integer
[[.args]]
type = leaderboard
default = "GetLastCreatedLeaderboard"

[LeaderboardGetIndexedPlayerBJ]
title = "Player In Position"
description = "Player in position ${Position} of ${Leaderboard}"
comment =""
category = TC_LEADERBOARD
use_in_event = 0
returns = player
[[.args]]
type = integer
default = "1"
min = 1
max = 16
[[.args]]
type = leaderboard
default = "GetLastCreatedLeaderboard"

[IsPointInRegion]
title = "Is Coordinate in Region"
description = "${Region} contains (${X},${Y})"
comment = "TC_REGION"
category = TC_REGION
returns = boolean
[[.args]]
type = region
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[IsLocationInRegion]
title = "Is Location In Region"
description = "${Region} Contains ${Location}"
comment = "TC_REGION"
category = TC_REGION
returns = boolean
[[.args]]
type = region
[[.args]]
type = location

[RectContainsLoc]
title = "Region Contains Point"
description = "${Region} contains ${Point}"
comment =""
category = TC_RECT
returns = boolean
[[.args]]
type = rect
default = "GetPlayableMapRect"
[[.args]]
type = location

[GetRectCenterX]
title = "Center X Of Region"
description = "Center X of ${Region}"
comment =""
category = TC_RECT
returns = real
[[.args]]
type = rect
default = "GetPlayableMapRect"

[GetRectCenterY]
title = "Center Y Of Region"
description = "Center Y of ${Region}"
comment =""
category = TC_RECT
returns = real
[[.args]]
type = rect
default = "GetPlayableMapRect"

[GetRectMinX]
title = "Min X Of Region"
description = "Min X of ${Region}"
comment =""
category = TC_RECT
returns = real
[[.args]]
type = rect
default = "GetPlayableMapRect"

[GetRectMinY]
title = "Min Y Of Region"
description = "Min Y of ${Region}"
comment =""
category = TC_RECT
returns = real
[[.args]]
type = rect
default = "GetPlayableMapRect"

[GetRectMaxX]
title = "Max X Of Region"
description = "Max X of ${Region}"
comment =""
category = TC_RECT
returns = real
[[.args]]
type = rect
default = "GetPlayableMapRect"

[GetRectMaxY]
title = "Max Y Of Region"
description = "Max Y of ${Region}"
comment =""
category = TC_RECT
returns = real
[[.args]]
type = rect
default = "GetPlayableMapRect"

[GetRectWidthBJ]
title = "Width Of Region"
description = "Width of ${Region}"
comment =""
category = TC_RECT
returns = real
[[.args]]
type = rect

[GetRectHeightBJ]
title = "Height Of Region"
description = "Height of ${Region}"
comment =""
category = TC_RECT
returns = real
[[.args]]
type = rect

[IsQuestItemCompleted]
title = "Quest Requirement Is Completed"
description = "${Quest Requirement} is completed"
comment =""
category = TC_QUEST
returns = boolean
[[.args]]
type = questitem
default = "GetLastCreatedQuestItemBJ"

[IsQuestEnabled]
title = "Quest Is Enabled"
description = "${Quest} is enabled"
comment =""
category = TC_QUEST
returns = boolean
[[.args]]
type = quest
default = "GetLastCreatedQuestBJ"

[IsQuestCompleted]
title = "Quest Is Completed"
description = "${Quest} is completed"
comment =""
category = TC_QUEST
returns = boolean
[[.args]]
type = quest
default = "GetLastCreatedQuestBJ"

[IsQuestFailed]
title = "Quest Is Failed"
description = "${Quest} is failed"
comment =""
category = TC_QUEST
returns = boolean
[[.args]]
type = quest
default = "GetLastCreatedQuestBJ"

[IsQuestDiscovered]
title = "Quest Is Discovered"
description = "${Quest} is discovered"
comment =""
category = TC_QUEST
returns = boolean
[[.args]]
type = quest
default = "GetLastCreatedQuestBJ"

[IsQuestRequired]
title = "Quest Is Required"
description = "${Quest} is required"
comment =""
category = TC_QUEST
returns = boolean
[[.args]]
type = quest
default = "GetLastCreatedQuestBJ"

[CreateQuest]
title = "Create Quest [R]"
description = "Create Quest "
comment = ""
category = TC_QUEST
returns = quest

[YDWECreateQuest]
title = "Create Quest[YDWE]"
description = "Create a ${Quest Type} Quest, Title: ${Text} Quest Info: ${Text} Quest Icon: ${Icon Path}"
comment = "Create a Quest[YDWE]"
script_name = CreateQuestBJ
category = TC_QUEST
returns = quest
[[.args]]
type = questtypeoption
default = "QuestTypeReqDiscovered"
[[.args]]
type = StringExt
max = 24
[[.args]]
type = StringExt
[[.args]]
type = imagefile
default = "\"ReplaceableTextures\\CommandButtons\\BTNAmbush.blp\""

[YDWECreateQuestItem]
title = "YDWE Create Quest Item[YDWE]"
description = "Cteate a Quest item for ${Quest} with text ${text}"
comment = "Create a Quest Item(YDWE)"
script_name = CreateQuestItemBJ
category = TC_QUEST
returns = questitem
[[.args]]
type = quest
default = "GetLastCreatedQuestBJ"
[[.args]]
type = StringExt

[IsPlayerFlagSetBJ]
title = "Player Flag Is On"
description = "${Player Flag} is on for ${Player}"
comment =""
category = TC_PLAYER
returns = boolean
[[.args]]
type = playerflag
default = "PlayerFlagGivesBounty"
[[.args]]
type = player
default = "PlayerNA"

[IsPlayerAlly]
title = "Player Is An Ally Of Player"
description = "${Player} is an ally of ${Player}"
comment =""
category = TC_PLAYER
returns = boolean
[[.args]]
type = player
default = "GetTriggerPlayer"
[[.args]]
type = player
default = "Player00"

[IsPlayerEnemy]
title = "Player Is An Enemy Of Player"
description = "${Player} is an enemy of ${Player}"
comment =""
category = TC_PLAYER
returns = boolean
[[.args]]
type = player
default = "GetTriggerPlayer"
[[.args]]
type = player
default = "Player00"

[IsPlayerObserver]
title = "Is Player Observer [R]"
description = "${Player} is Observer"
comment = ""
category = TC_PLAYER
returns = boolean
[[.args]]
type = player
default = "GetTriggerPlayer"

[IsPlayerRacePrefSet]
title = "Player Race"
description = "${Player} Select ${RacePreference}"
comment = ""
category = TC_PLAYER
returns = boolean
[[.args]]
type = player
default = "GetTriggerPlayer"
[[.args]]
type = racepreference
default = "RacePrefRandom"

[GetPlayerAlliance]
title = "Player Alliance Towards Player"
description = "${Player} is giving ${Player} ${Alliance Type}"
comment =""
category = TC_PLAYER
returns = boolean
[[.args]]
type = player
default = "GetTriggerPlayer"
[[.args]]
type = player
default = "Player00"
[[.args]]
type = alliancetype
default = "AllianceTypePassive"

[IsPlayerInForce]
title = "Player In Player Group"
description = "${Player} is in ${Player Group}"
comment =""
category = TC_PLAYER
returns = boolean
[[.args]]
type = player
default = "Player00"
[[.args]]
type = force
default = "GetPlayersAll"

[GetPlayerState]
title = "Player Property"
description = "${Player} ${Property}"
comment =""
category = TC_PLAYER
returns = integer
[[.args]]
type = player
default = "Player00"
[[.args]]
type = playerstate
default = "PlayerStateGold"

[GetPlayerTaxRate]
title = "Get Player Tax Rate [R]"
description = "Tax rate from ${Player} to ${Player} in ${Resource}"
comment = "Value range of tax rate is 0-100."
category = TC_PLAYER
returns = integer
[[.args]]
type = player
default = "Player00"
[[.args]]
type = player
default = "Player01"
[[.args]]
type = playerresource
default = "PlayerResourceGold"

[GetPlayerTaxRateBJ]
title = "Player Tax Rate"
description = "Tax rate of ${Resource} from ${Player} to ${Player}"
comment = "The tax rate value is a percentage of total income (0-100)."
category = TC_PLAYER
returns = integer
[[.args]]
type = playerresource
default = "PlayerResourceGold"
[[.args]]
type = player
default = "Player00"
[[.args]]
type = player
default = "Player01"

[GetPlayerScore]
title = "Player Score"
description = "${Player} ${Score}"
comment =""
category = TC_PLAYER
returns = integer
[[.args]]
type = player
default = "Player00"
[[.args]]
type = playerscore
default = "PlayerScoreTotal"

[GetConvertedPlayerId]
title = "Player Number"
description = "Player number of ${Player}"
comment = "Player numbers range from 1 to 16."
category = TC_PLAYER
returns = integer
[[.args]]
type = player
default = "GetTriggerPlayer"

[GetPlayerId]
title = "PlayerID - 1 [R]"
description = "PlayerID of ${Player} - 1"
comment = "PlayerID range in 1-16."
category = TC_PLAYER
returns = integer
[[.args]]
type = player
default = "GetTriggerPlayer"

[GetPlayerStructureCount]
title = "Count Structures"
description = "Count structures controlled by ${Player} (${Include/Exclude} incomplete structures)"
comment =""
category = TC_PLAYER
returns = integer
[[.args]]
type = player
default = "Player00"
[[.args]]
type = includeoption
default = "InclusionExclude"

[GetPlayerUnitCount]
title = "Count Non-Structure Units"
description = "Count non-structure units controlled by ${Player} (${Include/Exclude} incomplete units)"
comment =""
category = TC_PLAYER
returns = integer
[[.args]]
type = player
default = "Player00"
[[.args]]
type = includeoption
default = "InclusionExclude"

[GetPlayerTechCountSimple]
title = "Current Research Level"
description = "Current research level of ${Tech} for ${Player}"
comment = "Returns 0 or 1 for simple tech, or 0..3 for three-stage upgrades."
category = TC_PLAYER
returns = integer
[[.args]]
type = techcode
[[.args]]
type = player
default = "Player00"

[GetPlayerTechMaxAllowedSwap]
title = "Max Research Level"
description = "Max research level of ${Tech} for ${Player}"
comment = "Returns 0 or 1 for simple tech, or 0..3 for three-stage upgrades."
category = TC_PLAYER
returns = integer
[[.args]]
type = techcode
[[.args]]
type = player
default = "Player00"

[GetPlayerTeam]
title = "Player Team"
description = "Team number of ${Player}"
comment =""
category = TC_PLAYER
returns = integer
[[.args]]
type = player
default = "Player00"

[CountPlayersInForceBJ]
title = "Count Players In Player Group"
description = "Number of players in ${Player Group}"
comment =""
category = TC_PLAYER
returns = integer
[[.args]]
type = force
default = "GetPlayersByMapControl"

[GetPlayerHandicapXPBJ]
title = "Experience Rate"
description = "${Player} experience rate"
comment = "Experience rates are specified as percentages, with 100% being normal."
category = TC_PLAYER
returns = real
[[.args]]
type = player
default = "Player00"

[GetPlayerHandicapBJ]
title = "Handicap"
description = "${Player} handicap"
comment = "Handicap values are specified as percentages, with 100% being normal."
category = TC_PLAYER
returns = real
[[.args]]
type = player
default = "Player00"

[GetPlayerName]
title = "Player Name"
description = "Name of ${Player}"
comment =""
category = TC_PLAYER
returns = string
[[.args]]
type = player
default = "GetTriggerPlayer"

[GetPlayerStartLocationLoc]
title = "Player Start Location"
description = "${Player} start location"
comment =""
category = TC_PLAYER
returns = location
[[.args]]
type = player
default = "Player00"

[CheckItemStatus]
title = "Item Status Check"
description = "${Item} is ${Status}"
comment =""
category = TC_ITEM
use_in_event = 0
returns = boolean
[[.args]]
type = item
default = "GetLastCreatedItem"
[[.args]]
type = itemstatus
default = "ItemStatusHidden"

[CheckItemcodeStatus]
title = "Item-Type Status Check"
description = "${Item-Type} is ${Status}"
comment =""
category = TC_ITEM
use_in_event = 0
returns = boolean
[[.args]]
type = itemcode
default = "GetItemTypeId"
[[.args]]
type = itemcodestatus
default = "ItemcodeStatusPowerup"

[IsItemVisible]
title = "Is Item Visible [R]"
description = "${Item} is visible"
comment = "Item do not hide or own by some unit means visible."
category = TC_ITEM
use_in_event = 0
returns = boolean
[[.args]]
type = item
default = "bj_lastCreatedItem"

[IsItemHiddenBJ]
title = "Item Is Hidden"
description = "${Item} is hidden"
comment = "Items held by units are considered hidden."
category = TC_ITEM
use_in_event = 0
returns = boolean
[[.args]]
type = item
default = "GetLastCreatedItem"

[IsItemOwned]
title = "Item Is Owned"
description = "${Item} is owned"
comment = "Any item in a unit's inventory is considered owned, even if the owner is dead."
category = TC_ITEM
use_in_event = 0
returns = boolean
[[.args]]
type = item

[IsItemPowerup]
title = "Is Item Powerup [R]"
description = "${Item} is the type of powerup"
comment = ""
category = TC_ITEM
use_in_event = 0
returns = boolean
[[.args]]
type = item
default = "bj_lastCreatedItem"

[IsItemSellable]
title = "Is Item Sellable [R]"
description = "${Item} is the type of sellable"
comment = ""
category = TC_ITEM
use_in_event = 0
returns = boolean
[[.args]]
type = item
default = "bj_lastCreatedItem"

[IsItemPawnable]
title = "Is Item Pawnable [R]"
description = "${Item}  is the type of pawnable"
comment = ""
category = TC_ITEM
use_in_event = 0
returns = boolean
[[.args]]
type = item
default = "bj_lastCreatedItem"

[RectContainsItem]
title = "Item In Region"
description = "${Item} is in ${Region}"
comment = "An owned item is not considered to be in any regions."
category = TC_ITEM
returns = boolean
[[.args]]
type = item
default = "GetLastCreatedItem"
[[.args]]
type = rect

[IsItemInvulnerable]
title = "Item Is Invulnerable"
description = "${Item} is invulnerable"
comment =""
category = TC_ITEM
returns = boolean
[[.args]]
type = item
default = "GetLastCreatedItem"

[GetInventoryIndexOfItemTypeBJ]
title = "Get Inventory Index Of Item Type [C]"
description = "Get inverntory of ${Unit} owns item in type ${Item Type}"
comment = "If unit do not have the item, returns 0."
category = TC_ITEM
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = itemcode
default = "texp"

[GetItemLevel]
title = "Item Level"
description = "Item level of ${Item}"
comment =""
category = TC_ITEM
returns = integer
[[.args]]
type = item
default = "GetLastCreatedItem"

[GetItemCharges]
title = "Item Charges Remaining"
description = "Charges remaining in ${Item}"
comment = "Items with unlimited charges will return zero."
category = TC_ITEM
returns = integer
[[.args]]
type = item
default = "GetLastCreatedItem"

[GetItemUserData]
title = "Custom Value Of Item"
description = "Custom value of ${Item}"
comment = "Use 'Item - Set Custom Value' to set the custom value of an item."
category = TC_ITEM
returns = integer
[[.args]]
type = item

[GetItemLifeBJ]
title = "Item Life"
description = "Current life of ${Item}"
comment =""
category = TC_ITEM
returns = real
[[.args]]
type = item
default = "GetLastCreatedItem"

[GetItemX]
title = "Get Item X [R]"
description = "X axis value of ${Item}"
comment = ""
category = TC_ITEM
returns = real
[[.args]]
type = item
default = "GetLastCreatedItem"

[GetItemY]
title = "Get Item Y [R]"
description = "Y axis value of ${Item}"
comment = ""
category = TC_ITEM
returns = real
[[.args]]
type = item
default = "GetLastCreatedItem"

[GetItemName]
title = "Item Name"
description = "Name of ${Item}"
comment =""
category = TC_ITEM
returns = string
[[.args]]
type = item
default = "GetManipulatedItem"

[GetItemLoc]
title = "Position Of Item"
description = "Position of ${Item}"
comment =""
category = TC_ITEM
returns = location
[[.args]]
type = item
default = "GetLastCreatedItem"

[UnitHasItem]
title = "Hero Has Item"
description = "${Hero} has ${Item}"
comment =""
category = TC_HERO
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = item
default = "GetLastCreatedItem"

[UnitHasItemOfTypeBJ]
title = "Hero Has Item Of Type"
description = "${Hero} has an item of type ${Item-Type}"
comment =""
category = TC_HERO
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = itemcode
default = "texp"

[IsSuspendedXP]
title = "Experience Is Disabled For Hero"
description = "Experience is disabled for ${Hero}"
comment = "Use the 'Hero - Enable/Disable Experience' action to disable a Hero's experience."
category = TC_HERO
returns = boolean
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetHeroLevel]
title = "Hero Level"
description = "Hero level of ${Hero}"
comment =""
category = TC_HERO
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetHeroXP]
title = "Hero Experience"
description = "Hero experience of ${Hero}"
comment =""
category = TC_HERO
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[GetHeroStr]
title = "Get Hero Str [R]"
description = "Get Str of ${Hero} (${Include/Exclude} addition)"
comment = ""
category = TC_HERO
returns = integer
[[.args]]
type = unit
[[.args]]
type = includeoption
default = "InclusionExclude"

[GetHeroAgi]
title = "Get Hero Agi [R]"
description = "Get Agi of ${Hero} (${Include/Exclude} addition)"
comment = ""
category = TC_HERO
returns = integer
[[.args]]
type = unit
[[.args]]
type = includeoption
default = "InclusionExclude"

[GetHeroInt]
title = "Get Hero Int [R]"
description = "Get Int of ${Hero} (${Include/Exclude} addition)"
comment = ""
category = TC_HERO
returns = integer
[[.args]]
type = unit
[[.args]]
type = includeoption
default = "InclusionExclude"

[GetHeroStatBJ]
title = "Hero Attribute"
description = "${Attribute} of ${Hero} (${Include/Exclude} bonuses)"
comment =""
category = TC_HERO
returns = integer
[[.args]]
type = herostat
default = "HeroStatStr"
[[.args]]
type = unit
[[.args]]
type = includeoption
default = "InclusionExclude"

[GetHeroSkillPoints]
title = "Unspent Skill Points"
description = "Unspent skill points of ${Hero}"
comment =""
category = TC_HERO
returns = integer
[[.args]]
type = unit

[GetHeroProperName]
title = "Hero Proper Name"
description = "Proper name of ${Hero}"
comment = "Calling this on a hero will return his actual name (e.g. 'Granis Darkhammer' for a Paladin)."
category = TC_HERO
returns = string
[[.args]]
type = unit
default = "GetTriggerUnit"

[IsMapFlagSet]
title = "Map Flag Set"
description = "${Map Flag} is set"
comment =""
category = TC_GAME
returns = boolean
[[.args]]
type = mapflag
default = "MapFlagUseHandicaps"

[IsCustomCampaignButtonVisibile]
title = "Custom Campaign Button Is Visible"
description = "Custom campaign button ${Number} is visible"
comment =""
category = TC_GAME
use_in_event = 0
returns = boolean
[[.args]]
type = integer
default = "1"
min = 1

[GetCreepCampFilterState]
title = "Creep Camp Display Is On"
description = "Creep camp minimap display is turned on"
comment =""
category = TC_GAME
returns = boolean

[SaveGameExists]
title = "Saved-Game Exists"
description = "The ${Filename} saved-game exists"
comment =""
category = TC_GAME
use_in_event = 0
returns = boolean
[[.args]]
type = anyfile

[IsNoVictoryCheat]
title = "Is No Victory Cheat [R]"
description = "Player use cheat: No Victory"
comment = "Mode of single computer cheating."
category = TC_GAME
use_in_event = 0
returns = boolean

[IsNoDefeatCheat]
title = "Is No Defeat Cheat [R]"
description = "Player use cheat: No Defeat"
comment = "Mode of single computer cheating."
category = TC_GAME
use_in_event = 0
returns = boolean

[GetPlayers]
title = "Number Of Players"
description = "Number of players"
comment =""
category = TC_GAME
returns = integer

[GetTeams]
title = "Number Of Teams"
description = "Number of teams"
comment =""
category = TC_GAME
returns = integer

[GetAllyColorFilterState]
title = "Ally Color Filter Setting"
description = "Ally color filter setting"
comment = "A value of 0 indicates that filtering is disabled.  A value of 1 indicates that filtering is only enabled for the minimap.  A value of 2 indicates that filtering is enabled for the minimap and the game view."
category = TC_GAME
returns = integer

[GetTournamentFinishNowRule]
title = "Tournament Finish Rule"
description = "Tournament finish rule"
comment = "A value of 1 indicates that the game is in a bracket and therefore cannot end in a draw.  Any other value indicates that this is a preliminary game and may end in a draw."
category = TC_GAME
use_in_event = 0
returns = integer

[GetTournamentScore]
title = "Tournament Melee Score"
description = "Tournament melee score for ${Player}"
comment = "This returns the melee score for a player, which is used by melee games to determine victory/defeat/draw if a tournament game runs too long."
category = TC_GAME
use_in_event = 0
returns = integer
[[.args]]
type = player
default = "Player00"

[GetTimeOfDay]
title = "Time Of Day"
description = "In-game time of day"
comment = "This is in game time, not real time."
category = TC_GAME
returns = real

[GetTimeOfDayScalePercentBJ]
title = "Time Of Day Speed"
description = "Current time of day speed"
comment = "This returns the time of day speed as a percentage of the default time of day speed."
category = TC_GAME
returns = real

[GetAbilityName]
title = "Ability Name"
description = "Name of ${Ability}"
comment =""
script_name = GetObjectName
category = TC_GAME
returns = string
[[.args]]
type = abilcode

[GetAbilityEffectBJ]
title = "Ability Effect Art Path"
description = "Art path of ${Ability} ${EffectType} (index ${Index})"
comment = "This returns the model file path of an ability's effect art."
script_name = GetAbilityEffectById
category = TC_GAME
returns = string
[[.args]]
type = abilcode
[[.args]]
type = effecttype
default = "EffectTypeEffect"
[[.args]]
type = integer
default = "0"

[GetAbilitySoundBJ]
title = "Ability Effect Sound Name"
description = "Name of ${Ability} ${SoundType}"
comment =""
script_name = GetAbilitySoundById
category = TC_GAME
returns = string
[[.args]]
type = abilcode
[[.args]]
type = soundtype
default = "SoundTypeEffect"

[GetStoredBoolean]
title = "Load Boolean Value[R]"
description = "Load boolean from ${Game Cache}, category: ${Category}, name: ${text}"
comment = "If the label is not found, this function returns false."
category = TC_GAMECACHE
returns = boolean
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = string

[HaveStoredValue]
title = "Cache Value Exists"
description = "${Label} is stored as a ${Type} of ${Category} in ${Game Cache}"
comment =""
category = TC_GAMECACHE
use_in_event = 0
returns = boolean
[[.args]]
type = string
[[.args]]
type = cachevaluetype
default = "CacheValueTypeUnit"
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"

[GetStoredInteger]
title = "Load Integer Value [C]"
description = "Load integer from ${Game Cache}, catagory: ${Category}, name: ${text}"
comment = "If the label is not found, this function returns 0."
category = TC_GAMECACHE
returns = integer
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = string

[GetStoredReal]
title = "Load Real Value [C]"
description = "Load real from ${Game Cache}, catagory: ${Category}, name: ${text}"
comment = "If the label is not found, this function returns 0."
category = TC_GAMECACHE
returns = real
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = string

[GetStoredString]
title = "Load String Value [C]"
description = "Load string from ${Game Cache}, catagory: ${Category}, name: ${text}}"
comment = "If the label is not found, this function returns empty string. Notice empty string do not equal null"
category = TC_GAMECACHE
returns = string
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = string

[InitGameCache]
title = "Create Game Cache [R]"
description = "Create a game cache from ${Filename}"
comment = "A game cache allows you to store data between maps, or between games on a given map.  If the specified file does not exist, it will be created. Max cache count is 256."
category = TC_GAMECACHE
returns = gamecache
[[.args]]
type = string
default = "\"MapName.w3v\""

[WaygateIsActiveBJ]
title = "Way Gate Is Enabled"
description = "${Way Gate} is enabled"
comment =""
script_name = WaygateIsActive
category = TC_NEUTRALBUILDING
returns = boolean
[[.args]]
type = unit

[GetResourceAmount]
title = "Gold Remaining"
description = "Resource quantity contained in ${Gold Mine}"
comment = "This is for use with Gold Mines."
category = TC_NEUTRALBUILDING
returns = integer
[[.args]]
type = unit

[WaygateGetDestinationX]
title = "Way Gate Destination X"
description = "X axis value of destination of ${Way Gate}"
comment = ""
category = TC_NEUTRALBUILDING
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[WaygateGetDestinationY]
title = "Way Gate Destination Y"
description = "Y axis value of destination of ${Way Gate}"
comment = ""
category = TC_NEUTRALBUILDING
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"

[WaygateGetDestinationLocBJ]
title = "Way Gate Destination"
description = "Destination of ${Way Gate}"
comment =""
category = TC_NEUTRALBUILDING
returns = location
[[.args]]
type = unit

[LoadBooleanBJ]
title = "Load Boolean Value (Hashtable)"
description = "Load ${Value} of ${Value} from ${Hashtable}"
comment = "If the label is not found, this function returns False."
category = TC_HASHTABLE
returns = boolean
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadBoolean]
title = "<1.24> Load Boolean Value (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return False"
category = TC_HASHTABLE
returns = boolean
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[HaveSavedValue]
title = "Hashtable Value Exists"
description = "${Value} is stored as a ${Type} of ${Value} in ${Hashtable}"
comment =""
category = TC_HASHTABLE
use_in_event = 0
returns = boolean
[[.args]]
type = integer
[[.args]]
type = hashtablevaluetype
default = "HashtableValueTypeHandle"
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[GetHandleIdBJ]
title = "Get Handle ID"
description = "Key ${Handle}"
comment = "Creates a key from a handle for use in the hashtable."
category = TC_HASHTABLE
returns = integer
[[.args]]
type = handle

[GetHandleId]
title = "<1.24> Get Handle Id [C]"
description = "Key ${Handle}"
comment = "Creates a key from a handle for use in the hashtable. If the handle object destroy, the handle id wil be auto-collection."
category = TC_HASHTABLE
returns = integer
[[.args]]
type = handle

[StringHashBJ]
title = "Get String ID"
description = "Key ${String}"
comment = "Creates a key from a string for use in the hashtable."
category = TC_HASHTABLE
returns = integer
[[.args]]
type = string

[LoadIntegerBJ]
title = "Load Integer Value (Hashtable)"
description = "Load ${Value} of ${Value} from ${Hashtable}"
comment = "If the label is not found, this function returns 0."
category = TC_HASHTABLE
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadInteger]
title = "<1.24> Load Integer Value (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return 0"
category = TC_HASHTABLE
returns = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadRealBJ]
title = "Load Real Value (Hashtable)"
description = "Load ${Value} of ${Value} from ${Hashtable}"
comment = "If the label is not found, this function returns 0."
category = TC_HASHTABLE
returns = real
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadReal]
title = "<1.24> Load Real Value (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return 0.00"
category = TC_HASHTABLE
returns = real
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadStringBJ]
title = "Load String Value (Hashtable)"
description = "Load ${Value} of ${Value} from ${Hashtable}"
comment = "If the label is not found, this function returns an empty string."
category = TC_HASHTABLE
use_in_event = 0
returns = string
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadStr]
title = "<1.24> Load String Value (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
use_in_event = 0
returns = string
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadPlayerHandleBJ]
title = "Load Player Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = player
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadPlayerHandle]
title = "<1.24> Load Player Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = player
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadDestructableHandleBJ]
title = "Load Destructable Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = destructable
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadDestructableHandle]
title = "<1.24> Load Destructable Handle [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = destructable
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadItemHandleBJ]
title = "Load Item Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = item
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadItemHandle]
title = "<1.24> Load Item Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = item
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadUnitHandleBJ]
title = "Load Unit Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = unit
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadUnitHandle]
title = "<1.24> Load Unit Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = unit
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[YDWELoadAbilityHandleBJ]
title = "Load Ability Handle (Hashtable) [YDWE]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = abilcode
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[YDWELoadAbilityHandle]
title = "<1.24> Load Ability Handle (Hashtable) [YDWE] [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = abilcode
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadTimerHandleBJ]
title = "Load Timer Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = timer
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadTimerHandle]
title = "<1.24> Load Timer Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = timer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadTriggerHandleBJ]
title = "Load Trigger Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = trigger
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadTriggerHandle]
title = "<1.24> Load Trigger Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = trigger
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadTriggerConditionHandleBJ]
title = "Load Triggercondition Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = triggercondition
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadTriggerConditionHandle]
title = "<1.24> Load Triggercondition Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = triggercondition
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadTriggerActionHandleBJ]
title = "Load Triggeraction Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = triggeraction
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadTriggerActionHandle]
title = "<1.24> Load Triggeraction Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = triggeraction
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadTriggerEventHandleBJ]
title = "Load Eventid Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = event
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadTriggerEventHandle]
title = "<1.24> Load Eventid Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = event
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadForceHandleBJ]
title = "Load Force Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = force
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadForceHandle]
title = "<1.24> Load Force Handle (Hashtable)  [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = force
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadGroupHandleBJ]
title = "Load Group Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = group
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadGroupHandle]
title = "<1.24> Load Group Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = group
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadLocationHandleBJ]
title = "Load Location Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = location
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadLocationHandle]
title = "<1.24> Load Location Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = location
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadRegionHandleBJ]
title = "Load Region Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = region
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadRegionHandle]
title = "<1.24> Load Region Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = region
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadRectHandleBJ]
title = "Load Rect Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = rect
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadRectHandle]
title = "<1.24> Load Rect Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = rect
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadBooleanExprHandleBJ]
title = "Load Boolexpr Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = boolexpr
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadBooleanExprHandle]
title = "<1.24> Load Boolexpr Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = boolexpr
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadSoundHandleBJ]
title = "Load Sound Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = sound
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadSoundHandle]
title = "<1.24> Load Sound Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = sound
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadEffectHandleBJ]
title = "Load Effect Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = effect
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadEffectHandle]
title = "<1.24> Load Effect Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = effect
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadUnitPoolHandleBJ]
title = "Load Unitpool Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = unitpool
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadUnitPoolHandle]
title = "<1.24> Load Unitpool Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = unitpool
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadItemPoolHandleBJ]
title = "Load Itempool Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = itempool
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadItemPoolHandle]
title = "<1.24> Load Itempool Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = itempool
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadQuestHandleBJ]
title = "Load Quest Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = quest
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadQuestHandle]
title = "<1.24> Load Quest Handle [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = quest
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadQuestItemHandleBJ]
title = "Load Questitem Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = questitem
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadQuestItemHandle]
title = "<1.24> Load Questitem Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = questitem
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadDefeatConditionHandleBJ]
title = "Load Defeatcondition Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = defeatcondition
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadDefeatConditionHandle]
title = "<1.24> Load Defeatcondition Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = defeatcondition
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadTimerDialogHandleBJ]
title = "Load Timerdialog Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = timerdialog
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadTimerDialogHandle]
title = "<1.24> Load Timerdialog Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = timerdialog
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadLeaderboardHandleBJ]
title = "Load Leaderboard Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = leaderboard
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadLeaderboardHandle]
title = "<1.24> Load Leaderboard Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = leaderboard
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadMultiboardHandleBJ]
title = "Load Multiboard Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = multiboard
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadMultiboardHandle]
title = "<1.24> Load Multiboard Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = multiboard
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadMultiboardItemHandleBJ]
title = "Load Multiboarditem Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = multiboarditem
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadMultiboardItemHandle]
title = "<1.24> Load Multiboarditem Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = multiboarditem
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadTrackableHandleBJ]
title = "Load Trackable Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = trackable
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadTrackableHandle]
title = "<1.24> Load Trackable Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = trackable
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadDialogHandleBJ]
title = "Load Dialog Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = dialog
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadDialogHandle]
title = "<1.24> Load Dialog Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = dialog
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadButtonHandleBJ]
title = "Load Button Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = button
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadButtonHandle]
title = "<1.24> Load Button Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = button
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadTextTagHandleBJ]
title = "Load Texttag Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment =""
category = TC_HASHTABLE
returns = texttag
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadTextTagHandle]
title = "<1.24> Load Texttag Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = texttag
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadLightningHandleBJ]
title = "Load Lightning Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = lightning
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadLightningHandle]
title = "<1.24> Load Lightning Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = lightning
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadImageHandleBJ]
title = "Load Image Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = image
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadImageHandle]
title = "<1.24> Load Image Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = image
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadUbersplatHandleBJ]
title = "Load Ubersplat Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = ubersplat
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadUbersplatHandle]
title = "<1.24> Load Ubersplat Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = ubersplat
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadFogStateHandleBJ]
title = "Load Fogstate Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = fogstate
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadFogStateHandle]
title = "<1.24> Load Fogstate Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = fogstate
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[LoadFogModifierHandleBJ]
title = "Load Fogmodifier Handle (Hashtable)"
description = "Load ${Value} of ${Value} in ${Hashtable}"
comment = "If the label is not found, this function returns NULL."
category = TC_HASHTABLE
returns = fogmodifier
[[.args]]
type = integer
[[.args]]
type = integer
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"

[LoadFogModifierHandle]
title = "<1.24> Load Fogmodifier Handle (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_HASHTABLE
returns = fogmodifier
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[OperatorInt]
title = "Arithmetic"
description = "${Value} ${Operator} ${Value}"
comment =""
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = ArithmeticOperator
default = "OperatorAdd"
[[.args]]
type = integer
default = "1"

[OperatorReal]
title = "Arithmetic"
description = "${Value} ${Operator} ${Value}"
comment =""
category = TC_MATH
returns = real
[[.args]]
type = real
default = "0"
[[.args]]
type = ArithmeticOperator
default = "OperatorAdd"
[[.args]]
type = real
default = "0"

[YDWEOperatorInt3]
title = "Arithmetic Lv3"
description = "${Value} ${Operator} ${Value} ${Operator} ${Value}"
comment = ""
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = YArithmeticOperator
default = "YOperatorAdd"
[[.args]]
type = integer
default = "0"
[[.args]]
type = YArithmeticOperator
default = "YOperatorAdd"
[[.args]]
type = integer
default = "0"

[YDWEOperatorReal3]
title = "Arithmetic Lv3"
description = "${Value} ${Operator} ${Value} ${Operator} ${Value}"
comment = ""
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = YArithmeticOperator
default = "YOperatorAdd"
[[.args]]
type = real
default = "0"
[[.args]]
type = YArithmeticOperator
default = "YOperatorAdd"
[[.args]]
type = real
default = "0"

[YDWE_PreloadSL_Get]
title = "YDWE PerloadSL Get Value"
description = "For ${Player} Get *${Data Commet}, form current PerloadSL [${Data Index}]"
comment = "To get data from the Player local archive, you need to fill in the correct index of data items, which is the annotation of the data."
category = TC_YDSL
returns = integer
[[.args]]
type = player
default = "Player00"
[[.args]]
type = string
[[.args]]
type = integer
min = 1
max = 500

[YDWE_PreloadSL_GetFile]
title = "YDWE Get PreloadSL (File Name)[YDWE]"
description = "For ${Player} Get bank name in ${Folder}], by the index [${Integer}]"
comment = "Advanced function, get the name of a Player archive file in the specified directory, fill in the correct index, and get the corresponding archive name."
category = TC_YDSL
returns = string
[[.args]]
type = player
default = "Player00"
[[.args]]
type = string
[[.args]]
type = integer
min = 1
max = 16

[GetForLoopIndexA]
title = "For Loop Integer A"
description = "Integer A"
comment =""
category = TC_FORLOOP
returns = integer

[GetForLoopIndexB]
title = "For Loop Integer B"
description = "Integer B"
comment =""
category = TC_FORLOOP
returns = integer

[OrderId2StringBJ]
title = "Convert Order To String"
description = "String(${Order})"
comment = "Example order strings:  ''harvest'', ''move'', ''smart'', ''attack''."
category = TC_CONVERSION
returns = string
[[.args]]
type = ordercode
default = "GetIssuedOrderIdBJ"

[UnitId2StringBJ]
title = "Convert Unit-Type To String"
description = "String(${Unit-Type})"
comment =""
category = TC_CONVERSION
returns = string
[[.args]]
type = unitcode
default = "GetUnitTypeId"

[GetLocalizedString]
title = "Get Localized String [R]"
description = "Get localized string: ${text}"
comment = "Get text defines in ui\\framedef\\globalstrings.fdf."
category = TC_CONVERSION
use_in_event = 0
returns = string
[[.args]]
type = string

[StringIdentity]
title = "Convert Externalized String"
description = "Externalized string(${Text})"
comment = "Use this to make sure the given string will be externalized in the map string file (war3map.wts)."
script_name = GetLocalizedString
category = TC_CONVERSION
use_in_event = 0
returns = string
[[.args]]
type = string

[GetLocalizedHotkey]
title = "Get Localized Hotkey "
description = "Get localized hotkey: ${Text}"
comment = "Get hotkey defines in ui\\miscui.."
category = TC_CONVERSION
use_in_event = 0
returns = integer
[[.args]]
type = string

[StringCase]
title = "Convert String Case"
description = "String(${String}) as ${Lower/Upper Case}"
comment = "All letters in the string will be changed to the selected case."
category = TC_CONVERSION
returns = string
[[.args]]
type = StringExt
[[.args]]
type = stringcaseoption
default = "StringCaseLower"

[Location]
title = "Convert Coordinates To Point"
description = "Point(${X}, ${Y})"
comment =""
category = TC_CONVERSION
returns = location
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[String2UnitIdBJ]
title = "Convert String To Unit-Type"
description = "Unit-type(${String})"
comment =""
script_name = UnitId
category = TC_CONVERSION
returns = unitcode
[[.args]]
type = string
default = "footman"

[String2OrderIdBJ]
title = "Convert String To Order"
description = "Order(${String})"
comment = "Example order strings:  ''harvest'', ''move'', ''smart'', ''attack''."
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = string
default = "stop"

[UnitId2OrderIdBJ]
title = "Convert Unit-Type To Order"
description = "Order(${Unit-Type})"
comment =""
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = unitcode
default = "hfoo"

[ConvertedPlayer]
title = "Convert Player Index To Player"
description = "Player(${Player Index})"
comment = "Player indexes range from 1 to 16."
category = TC_CONVERSION
returns = player
[[.args]]
type = integer
default = "1"
min = 1
max = 16

[YDWEGetGameCurrentTime]
title = "YDWE Timer System - Get current game time"
description = "Get current game time"
comment = "Get the time from the beginning of the game to the present time, in seconds."
category = TC_YDST
returns = integer

[YDWETimerSystemGetRunIndex]
title = "YDWE Timer System - Get Central Timer Run Index"
description = "Get center timer run index"
comment = "Gets the number of times the central Timer runs Trigger or function so far."
category = TC_YDST
returns = integer

[YDWEGetUnitItemSoftId]
title = "YDWE Get Slot ID of Item[YDWE]"
description = "Get slot id form ${Unit} by ${Item}"
comment = "Returns the location in the Item column of the unit where Item is located, a value between 1-6. If there is no Item in the unit, it returns 0.."
category = TC_YDST
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = item
default = "GetManipulatedItem"

[YDWEConverUnitcodeToInt]
title = "YDWE Conver Unitcode To Int [YDWE]"
description = "Show <${Type}> in integer"
comment = "Unit type itself is an integer, so there is no need to convert; this function is mainly used in the path setting of the storage system."
category = TC_YDST
returns = integer
[[.args]]
type = unitcode

[YDWEConverItemcodeToInt]
title = "YDWE Conver Itemcode To Int [YDWE]"
description = "Show <${Type}> in integer"
comment = "Item Type itself is an integer, so there is no need to convert; this function is mainly used in the path setting of the storage system."
category = TC_YDST
returns = integer
[[.args]]
type = itemcode

[YDWEConverAbilcodeToInt]
title = "YDWE Conver Abilcode To Int [YDWE]"
description = "Show <${Type}> in integer"
comment = "Ability itself is an integer, so there is no need to convert; this function is mainly used in the path setting of the storage system."
category = TC_YDST
returns = integer
[[.args]]
type = abilcode

[YDWEConverOrdercodeToInt]
title = "YDWE Conver Ordercode To Int [YDWE]"
description = "Show <${Type}> in integer"
comment = "Order ID itself is an integer, so there is no need to convert; this function is mainly used in the path setting of the storage system."
category = TC_YDST
returns = integer
[[.args]]
type = ordercode

[YDWEI2UnitId]
title = "YDWE Convert Integer To UnitId [YDWE]"
description = "Convert ${Integer} to UnitId"
comment = "Convert a integer to UnitId, e.g. input 1751543663, it will convert to UnitId of footman."
category = TC_YDST
returns = unitcode
[[.args]]
type = integer

[YDWEI2ItemId]
title = "YDWE Convert Integer To ItemId [YDWE]"
description = "Convert ${Integer} to ItemId"
comment = "Convert a integer to ItemID, e.g. input 1936749416, it will convert to ItemID of Amulet of Spell Shield."
category = TC_YDST
returns = itemcode
[[.args]]
type = integer

[YDWES2Id]
title = "YDWE Convert String To Id [YDWE]"
description = "String to convert to id is ${String}"
comment = "Convert a string to a UnitId, ItemId or other object id; e.g. spsh will convert to 'spsh', use  this you can create a unit or item by chat message."
category = TC_YDST
returns = integer
[[.args]]
type = string
default = "spsh"

[YDWES2UnitId]
title = "YDWE Convert String To UnitId [YDWE]"
description = "String to convert to UnitId is: ${String}"
comment = "Convert a string to a UnitId, e.g. input hfoo, it will convert to UnitId of footman."
category = TC_YDST
returns = unitcode
[[.args]]
type = string
default = "hfoo"

[YDWES2ItemId]
title = "YDWE Convert String To ItemId [YDWE]"
description = "String to convert to ItemId is: ${String}"
comment = "Convert a string to a ItemID, e.g. input spsh, it will convert to ItemID of Amulet of Spell Shield."
category = TC_YDST
returns = itemcode
[[.args]]
type = string
default = "spsh"

[YDWEGetUnitGoldCost]
title = "YDWE Get Unit Gold Cost (UnitType)"
description = "Get ${Unit} gold cost in building"
comment = "This trigger action can only use to get the build cost of gold, if input a hero unit, will get a fixed value 425"
category = TC_YDST
returns = integer
[[.args]]
type = unitcode
default = "hfoo"

[YDWEGetUnitWoodCost]
title = "YDWE Get Unit Wood Cost (UnitType)"
description = "Get ${Unit} wood cost in building"
comment = "This trigger action can only use to get the build cost of wood, if input a hero unit, will get a fixed value 100"
category = TC_YDST
returns = integer
[[.args]]
type = unitcode
default = "hfoo"

[YDWEGetUnitBuildTime]
title = "YDWE Get Unit Build Time (UnitType)"
description = "Get ${Unit} teme cost in building"
comment = "This trigger action can only use to get the build cost of time, if input a hero unit, will get a fixed value 55"
category = TC_YDST
returns = integer
[[.args]]
type = unitcode
default = "hfoo"

[YDWEGetUnitFoodUsed]
title = "YDWE Get Unit Food Used (Unit)"
description = "Get ${Unit} food cost in build"
comment = "This trigger action can only use to get the build cost of food cost, if input a hero unit, will get a fixed value 5"
category = TC_YDST
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[YDWEGetUnitFoodMade]
title = "YDWE Get Unit Food Made (Unit)"
description = "Get ${Unit}  food made in build"
comment = "This trigger action can only use to get the build cost of food made, if input a hero unit, will get a fixed value 0"
category = TC_YDST
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[YDWECoordinateX]
title = "YDWE Coordinate X [YDWE]"
description = "X axis that need fix is ${Real}"
comment = "Set the modified X coordinate to force it to be larger than the minimum value of the map boundary, which is smaller than the maximum value of the map boundary and avoid playing the game error."
category = TC_YDST
returns = real
[[.args]]
type = real

[YDWECoordinateY]
title = "YDWE Coordinate Y [YDWE]"
description = "Y axis that need fix is  ${Real}"
comment = "Set the modified Y coordinate to force it to be larger than the minimum value of the map boundary, which is smaller than the maximum value of the map boundary and avoid playing the game error."
category = TC_YDST
returns = real
[[.args]]
type = real

[YDWEGetUnitArmor]
title = "YDWE Get Unit Armor<By Rising_Dusk>"
description = "Get ${Unit} armor, linked Ability is ${Helper Ability}"
comment = "You can get the armor value of Unit; it is necessary to ensure that the chaos attack is 100% damage to all armor. Refer to the setting of the associated Ability for the auxiliary map under the example folder."
category = TC_YDST
returns = real
[[.args]]
type = unit
default = "GetTriggerUnit"
[[.args]]
type = abilcode

[YDWEId2S]
title = "YDWE Convert Id to string"
description = "Id to convert to string is : ${Integer}"
comment = "Converts the Id of a unit, object, etc. to a string, such as SPSH after'spsh'conversion."
category = TC_YDST
returns = string
[[.args]]
type = integer
default = "'spsh'"

[YDWEGetPlayerColorString]
title = "YDWE Get Player Color String"
description = "|c[${Player}]${Start}|r"
comment = ""
category = TC_YDST
returns = string
[[.args]]
type = player
default = "Player00"
[[.args]]
type = string

[GetLastAbilityCastingUnit]
title = "YDWE Get Last Ability Casting Unit"
description = "Get the last unit cast spec ability"
comment = "Response the last unit who cast the special ability in event."
category = TC_YDST
returns = unit

[GetLastAbilityTargetUnit]
title = "YDWE Get Last Ability Casting Target Unit"
description = "Get the last target unit cast spec ability"
comment = "Response the last unit who cast the special ability in event."
category = TC_YDST
returns = unit

[YDWEInitHashtable]
title = "Create Hashtable (YDWE)"
description = "Create hashtable"
comment = "Create a hashtable."
category = TC_YDST
use_in_event = 0
returns = hashtable

[GetLearnedSkillLevel]
title = "Learned Skill Level"
description = "Learned skill level"
comment =""
category = TC_EVENTRESPONSE
returns = integer

[GetEventDamage]
title = "Damage Taken"
description = "Damage taken"
comment = "When responding to a 'Takes Damage' unit event, this refers to the amount of damage being taken."
category = TC_EVENTRESPONSE
returns = real

[GetOrderPointX]
title = "Target Point Of Issued Order X [R]"
description = "X axis of target point of issued order"
comment = "When responding to an 'Is Issued An Order Targeting A Point' unit event, this refers to the target of the order."
category = TC_EVENTRESPONSE
returns = real

[GetOrderPointY]
title = "Target Point Of Issued Order Y [R]"
description = "Y axis of target point of issued order"
comment = "When responding to an 'Is Issued An Order Targeting A Point' unit event, this refers to the target of the order."
category = TC_EVENTRESPONSE
returns = real

[GetSpellTargetX]
title = "Target Point Of Ability Being Cast X"
description = "X axis of target point of ability being cast"
comment = "It is a function of 1.24, but have added to trigger library, so it can be use in 1.20."
category = TC_EVENTRESPONSE
returns = real

[GetSpellTargetY]
title = "Target Point Of Ability Being Cast Y"
description = "Y axis of target point of ability being cast"
comment = "It is a function of 1.24, but have added to trigger library, so it can be use in 1.20."
category = TC_EVENTRESPONSE
returns = real

[GetTournamentFinishSoonTimeRemaining]
title = "Tournament Time Remaining"
description = "Tournament time remaining"
comment = "When responding to a 'Game must end soon' tournament event, this returns the amount of time remaining, in real-time seconds."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = real

[GetEventPlayerChatString]
title = "Entered Chat String"
description = "Entered chat string"
comment =""
category = TC_EVENTRESPONSE
returns = string

[GetEventPlayerChatStringMatched]
title = "Matched Chat String"
description = "Matched chat string"
comment =""
category = TC_EVENTRESPONSE
returns = string

[GetSaveBasicFilename]
title = "Saved-Game Filename"
description = "Saved-game filename"
comment = "When responding to a 'Game - Game Save' event, this refers to the name of the file being saved."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = string

[GetOrderPointLoc]
title = "Target Point Of Issued Order"
description = "Target point of issued order"
comment = "When responding to an 'Is Issued An Order Targeting A Point' unit event, this refers to the target of the order."
category = TC_EVENTRESPONSE
returns = location

[GetSpellTargetLoc]
title = "Target Point Of Ability Being Cast"
description = "Target point of ability being cast"
comment = "When responding to 'Channeling/Casting/etc. casting an ability' unit events, this refers to the target point of the ability being cast."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = location

[CreateRegion]
title = "Create Region [R]"
description = "Create a empty region"
comment = "Create a Region, if not add range or rect, it have no effect."
category = TC_REGION
use_in_event = 0
returns = region

[GetTriggeringRegion]
title = "Get Trigger Region [R]"
description = "Trigger region"
comment = "Respons unit enter/leave region event."
category = TC_EVENTRESPONSE
returns = region

[GetAttackedUnitBJ]
title = "Attacked Unit"
description = "Attacked unit"
comment = "When responding to an 'Is Attacked' unit event, this refers to the unit that is being attacked."
script_name = GetTriggerUnit
category = TC_EVENTRESPONSE
returns = unit

[GetAttacker]
title = "Attacking Unit"
description = "Attacking unit"
comment = "When responding to an 'Is Attacked' unit event, this refers to the attacking unit."
category = TC_EVENTRESPONSE
returns = unit

[GetBuyingUnit]
title = "Buying Unit"
description = "Buying unit"
comment = "When responding to 'Sells A Unit', 'Sells An Item', or 'Pawns An Item' unit events, this refers to the unit doing the buying."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = unit

[GetCancelledStructure]
title = "Cancelled Structure"
description = "Cancelled structure"
comment = "When responding to a 'Cancels Construction' unit event, this refers to the unit whose construction has been cancelled."
category = TC_EVENTRESPONSE
returns = unit

[GetSpellAbilityUnit]
title = "Casting Unit"
description = "Casting unit"
comment = "When responding to 'Channeling/Casting/etc. casting an ability' unit events, this refers to the unit casting the ability."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = unit

[GetConstructingStructure]
title = "Constructing Structure"
description = "Constructing structure"
comment = "When responding to a 'Begins Construction' unit event, this refers to the unit whose construction has begun."
category = TC_EVENTRESPONSE
returns = unit

[GetConstructedStructure]
title = "Constructed Structure"
description = "Constructed structure"
comment = "When responding to a 'Finishes Construction' unit event, this refers to the unit whose construction has finished."
category = TC_EVENTRESPONSE
returns = unit

[GetEventDamageSource]
title = "Damage Source"
description = "Damage source"
comment = "When responding to a 'Takes Damage' unit event, this refers to the source of damage being dealt."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = unit

[GetDecayingUnit]
title = "Decaying Unit"
description = "Decaying unit"
comment = "When responding to a 'Decays' unit event, this refers to the unit that is decaying."
category = TC_EVENTRESPONSE
returns = unit

[GetDyingUnit]
title = "Dying Unit"
description = "Dying unit"
comment = "When responding to a 'Dies' unit event, this refers to the unit that is dying."
category = TC_EVENTRESPONSE
returns = unit

[GetEnteringUnit]
title = "Entering Unit"
description = "Entering unit"
comment = "When responding to a 'Unit Enters Region' unit event, this refers to the unit entering the region."
category = TC_EVENTRESPONSE
returns = unit

[GetManipulatingUnit]
title = "Hero Manipulating Item"
description = "Hero manipulating item"
comment = "When responding to 'Uses/Acquires/Loses An Item' unit events, this refers to the Hero that is manipulating the item."
category = TC_EVENTRESPONSE
returns = unit

[GetKillingUnitBJ]
title = "Killing Unit"
description = "Killing unit"
comment = "When responding to a 'Dies' unit event, this refers to the killer of the dying unit.  In cases where a unit dies from a source other than a killing unit, this returns 'No unit'."
script_name = GetKillingUnit
category = TC_EVENTRESPONSE
returns = unit

[GetLearningUnit]
title = "Learning Hero"
description = "Learning Hero"
comment = "When responding to a 'Learns A Skill' unit event, this refers to the unit learning the skill."
category = TC_EVENTRESPONSE
returns = unit

[GetLeavingUnit]
title = "Leaving Unit"
description = "Leaving unit"
comment = "When responding to a 'Unit Leaves Region' event, this refers to the unit leaving the region."
category = TC_EVENTRESPONSE
returns = unit

[GetLevelingUnit]
title = "Leveling Hero"
description = "Leveling Hero"
comment = "When responding to a 'Gains A Level' unit event, this refers to the unit gaining the level."
category = TC_EVENTRESPONSE
returns = unit

[GetLoadedUnitBJ]
title = "Loading Unit"
description = "Loading unit"
comment = "When responding to an 'Is Loaded Into A Transport' unit event, this refers to the unit that is being loaded."
script_name = GetLoadedUnit
category = TC_EVENTRESPONSE
returns = unit

[GetOrderedUnit]
title = "Ordered Unit"
description = "Ordered unit"
comment = "When responding to an 'Is Issued An Order' unit event, this refers to the unit receiving the order."
category = TC_EVENTRESPONSE
returns = unit

[GetChangingUnit]
title = "Ownership-Changed Unit"
description = "Ownership-changed unit"
comment = "When responding to a 'Changes Owner' unit event, this refers to the unit whose ownership has changed."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = unit

[GetResearchingUnit]
title = "Researching Unit"
description = "Researching unit"
comment = "When responding to 'Begins/Cancels/Finishes Research' unit events, this refers to the unit doing the research."
category = TC_EVENTRESPONSE
returns = unit

[GetRevivableUnit]
title = "Revivable Hero"
description = "Revivable Hero"
comment = "When responding to a 'Becomes Revivable' unit event, this refers to the unit that has become available for revival."
category = TC_EVENTRESPONSE
returns = unit

[GetRevivingUnit]
title = "Reviving Hero"
description = "Reviving Hero"
comment = "When responding to 'Begins/Cancels/Finishes Reviving' unit events, this refers to the unit being revived."
category = TC_EVENTRESPONSE
returns = unit

[GetSellingUnit]
title = "Selling Unit"
description = "Selling unit"
comment = "When responding to 'Sells A Unit', 'Sells An Item', or 'Pawns An Item' unit events, this refers to the unit doing the selling."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = unit

[GetSoldUnit]
title = "Sold Unit"
description = "Sold unit"
comment = "When responding to a 'Sells A Unit' unit event, this refers to the unit being sold."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = unit

[GetSummonedUnit]
title = "Summoned Unit"
description = "Summoned unit"
comment = "When responding to a 'Spawns A Summoned Unit' unit event, this refers to the unit being summoned."
category = TC_EVENTRESPONSE
returns = unit

[GetSummoningUnit]
title = "Summoning Unit"
description = "Summoning unit"
comment = "When responding to a 'Spawns A Summoned Unit' unit event, this refers to the unit spawning the summoned unit."
category = TC_EVENTRESPONSE
returns = unit

[GetOrderTargetUnit]
title = "Target Unit Of Issued Order"
description = "Target unit of issued order"
comment = "When responding to an 'Is Issued An Order Targeting An Object' unit event with a unit target, this refers to the target of the order."
category = TC_EVENTRESPONSE
returns = unit

[GetSpellTargetUnit]
title = "Target Unit Of Ability Being Cast"
description = "Target unit of ability being cast"
comment = "When responding to 'Channeling/Casting/etc. casting an ability' unit events with a unit target, this refers to the target of the ability being cast."
category = TC_EVENTRESPONSE
returns = unit

[GetEventTargetUnit]
title = "Targeted Unit"
description = "Targeted unit"
comment = "When responding to an 'Acquires A Target' unit event, this refers to the target being acquired."
category = TC_EVENTRESPONSE
returns = unit

[GetTrainedUnit]
title = "Trained Unit"
description = "Trained unit"
comment = "When responding to a 'Finishes Training A Unit' unit event, this refers to the unit that was trained."
category = TC_EVENTRESPONSE
returns = unit

[GetTransportUnitBJ]
title = "Transporting Unit"
description = "Transporting unit"
comment = "When responding to an 'Is Loaded Into A Transport' unit event, this refers to the transport that loaded the unit."
script_name = GetTransportUnit
category = TC_EVENTRESPONSE
returns = unit

[GetTriggerUnit]
title = "Triggering Unit"
description = "Triggering unit"
comment =""
category = TC_EVENTRESPONSE
returns = unit

[GetTrainedUnitType]
title = "Trained Unit-Type"
description = "Trained unit-type"
comment = "When responding to 'Begins/Cancels/Finishes Training A Unit' unit events, this refers to the unit-type of the unit that is being trained."
category = TC_EVENTRESPONSE
returns = unitcode

[GetIssuedOrderIdBJ]
title = "Issued Order"
description = "Issued order"
comment = "When responding to 'Is Issued An Order' unit events, this refers to the order being issued."
script_name = GetIssuedOrderId
category = TC_EVENTRESPONSE
returns = ordercode

[GetDyingDestructable]
title = "Dying Destructable"
description = "Dying Destructable"
comment = "When responding to a 'Destructable Dies' event, this refers to the Destructable that is dying."
category = TC_EVENTRESPONSE
returns = destructable

[GetOrderTargetDestructable]
title = "Target Destructable Of Issued Order"
description = "Target Destructable of issued order"
comment = "When responding to an 'Is Issued An Order Targeting An Object' unit event with a Destructable target, this refers to the target of the order."
category = TC_EVENTRESPONSE
returns = destructable

[GetSpellTargetDestructable]
title = "Target Destructable Of Ability Being Cast"
description = "Target Destructable of ability being cast"
comment = "When responding to 'Channeling/Casting/etc. casting an ability' unit events with a Destructable target, this refers to the target of the ability being cast."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = destructable

[GetManipulatedItem]
title = "Item Being Manipulated"
description = "Item being manipulated"
comment = "When responding to 'Uses/Acquires/Loses An Item' unit events, this refers to the item being manipulated."
category = TC_EVENTRESPONSE
returns = item

[GetSoldItem]
title = "Sold Item"
description = "Sold Item"
comment = "When responding to 'Sells An Item' or 'Pawns An Item' unit events, this refers to the item being sold."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = item

[GetOrderTargetItem]
title = "Target Item Of Issued Order"
description = "Target item of issued order"
comment = "When responding to an 'Is Issued An Order Targeting An Object' unit event with an item target, this refers to the target of the order."
category = TC_EVENTRESPONSE
returns = item

[GetSpellTargetItem]
title = "Target Item Of Ability Being Cast"
description = "Target item of ability being cast"
comment = "When responding to 'Channeling/Casting/etc. casting an ability' unit events with an item target, this refers to the target of the ability being cast."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = item

[GetResearched]
title = "Researched Tech-Type"
description = "Researched tech-type"
comment = "When responding to 'Begins/Cancels/Finishes Research' unit events, this refers to the tech-type being researched."
category = TC_EVENTRESPONSE
returns = techcode

[GetSpellAbilityId]
title = "Ability Being Cast"
description = "Ability being cast"
comment = "When responding to 'Channeling/Casting/etc. casting an ability' unit events, this refers to the ability being cast."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = abilcode

[GetLearnedSkill]
title = "Learned Hero Skill [R]"
description = "Learned Hero Skill"
comment = ""
category = TC_EVENTRESPONSE
returns = abilcode

[GetLearnedSkillBJ]
title = "Learned Hero Skill"
description = "Learned Hero Skill"
comment =""
script_name = GetLearnedSkill
category = TC_EVENTRESPONSE
returns = heroskillcode

[GetChangingUnitPrevOwner]
title = "Previous Owner"
description = "Previous owner"
comment = "When responding to a 'Changes Owner' unit event, this refers to the previous owner of the unit."
category = TC_EVENTRESPONSE
use_in_event = 0
returns = player

[GetTriggerPlayer]
title = "Triggering Player"
description = "Triggering player"
comment =""
category = TC_EVENTRESPONSE
returns = player

[GetClickedDialogBJ]
title = "Clicked Dialog"
description = "Clicked dialog"
comment = "When responding to a 'Dialog - Dialog Button Click' event, this refers to the dialog containing the clicked button."
script_name = GetClickedDialog
category = TC_EVENTRESPONSE
returns = dialog

[GetClickedButtonBJ]
title = "Clicked Dialog Button"
description = "Clicked dialog button"
comment = "When responding to a 'Dialog - Button Clicked' event, this refers to the dialog button that is being clicked."
script_name = GetClickedButton
category = TC_EVENTRESPONSE
returns = button

[GetExpiredTimer]
title = "Expiring Timer"
description = "Expiring timer"
comment = "When responding to a 'Time - Timer Expires' event, this refers to the timer that is expiring."
category = TC_EVENTRESPONSE
returns = timer

[GetTriggeringTrackable]
title = "Event Response - Trigger Trackable [R]"
description = "Event Response - Trigger Trackable"
comment = ""
category = TC_EVENTRESPONSE
returns = trackable

[GetRandomInt]
title = "Random Number"
description = "Random integer number between ${Minimum} and ${Maximum}"
comment =""
category = TC_MATH
returns = integer
[[.args]]
type = integer
default = "1"
[[.args]]
type = integer
default = "10"

[IMinBJ]
title = "Min"
description = "Min(${Value 1}, ${Value 2})"
comment =""
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer

[IMaxBJ]
title = "Max"
description = "Max(${Value 1}, ${Value 2})"
comment =""
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer

[IAbsBJ]
title = "Abs"
description = "Abs(${Value})"
comment = "Calculates the absolute value of a number."
category = TC_MATH
returns = integer
[[.args]]
type = integer

[ISignBJ]
title = "Sign"
description = "Sign(${Value})"
comment = "Calculates the sign of a number.  The sign of a negative number is -1.  The sign of a nonnegative number is 1."
category = TC_MATH
returns = integer
[[.args]]
type = integer

[StringHash]
title = "Get String ID [R]"
description = "Key ${String}"
comment = "Creates a key from a string for use in the hashtable."
category = TC_MATH
returns = integer
[[.args]]
type = string

[ModuloInteger]
title = "Modulo"
description = "${Dividend} mod ${Divisor}"
comment = "Calculates the remainder of a division.  Example: 12 mod 5 = 2."
category = TC_MATH
returns = integer
[[.args]]
type = integer
[[.args]]
type = integer

[GetRandomReal]
title = "Random Number"
description = "Random real number between ${Minimum} and ${Maximum}"
comment =""
category = TC_MATH
returns = real
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "1"

[GetRandomDirectionDeg]
title = "Random Angle"
description = "Random angle"
comment = "This is a random real number in the range of 0 to 360, for use as an angle or a unit facing."
category = TC_MATH
returns = degree

[GetRandomPercentageBJ]
title = "Random Percentage"
description = "Random percentage"
comment = "This is a random real number in the range of 0 to 100, for use as a percentage."
category = TC_MATH
returns = real

[RMinBJ]
title = "Min"
description = "Min(${Value 1}, ${Value 2})"
comment =""
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = real

[RMaxBJ]
title = "Max"
description = "Max(${Value 1}, ${Value 2})"
comment =""
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = real

[RAbsBJ]
title = "Abs"
description = "Abs(${Value})"
comment = "Calculates the absolute value of a number."
category = TC_MATH
returns = real
[[.args]]
type = real

[RSignBJ]
title = "Sign"
description = "Sign(${Value})"
comment = "Calculates the sign of a number.  The sign of a negative number is -1.  The sign of a nonnegative number is 1."
category = TC_MATH
returns = real
[[.args]]
type = real

[ModuloReal]
title = "Modulo"
description = "${Dividend} mod ${Divisor}"
comment = "Calculates the remainder of a division.  Example: 9.0 mod 2.5 = 1.5."
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = real

[Pow]
title = "Power"
description = "Power(${Value}, ${Power})"
comment =""
category = TC_MATH
returns = real
[[.args]]
type = real
[[.args]]
type = real

[SquareRoot]
title = "Square Root"
description = "Square root(${Value})"
comment =""
category = TC_MATH
returns = real
[[.args]]
type = real
min = 0

[SinBJ]
title = "Sine"
description = "Sin(${Angle})"
comment = "The angle specified is expected to be in degrees."
category = TC_MATH
returns = real
[[.args]]
type = degree
default = "GetUnitFacing"

[CosBJ]
title = "Cosine"
description = "Cos(${Angle})"
comment = "The angle specified is expected to be in degrees."
category = TC_MATH
returns = real
[[.args]]
type = degree
default = "GetUnitFacing"

[TanBJ]
title = "Tangent"
description = "Tan(${Angle})"
comment = "The angle specified is expected to be in degrees."
category = TC_MATH
returns = real
[[.args]]
type = degree
default = "GetUnitFacing"

[AsinBJ]
title = "Arcsine"
description = "Asin(${Value})"
comment = "The angle returned is in degrees."
category = TC_MATH
returns = degree
[[.args]]
type = real
min = -1
max = 1

[AcosBJ]
title = "Arccosine"
description = "Acos(${Value})"
comment = "The angle returned is in degrees."
category = TC_MATH
returns = degree
[[.args]]
type = real
min = -1
max = 1

[AtanBJ]
title = "Arctangent (From Angle)"
description = "Atan(${Value})"
comment = "The angle returned is in degrees."
category = TC_MATH
returns = degree
[[.args]]
type = real

[Atan2BJ]
title = "Arctangent (From Deltas)"
description = "Atan2(${Y}, ${X})"
comment = "The angle returned is in degrees."
category = TC_MATH
returns = degree
[[.args]]
type = real
[[.args]]
type = real

[Sin]
title = "Sine(Radian) [R]"
description = "Sin(${Angle})"
comment = "Using the radian system. "
category = TC_MATH
returns = real
[[.args]]
type = radian
default = "bj_PI"

[Cos]
title = "Cosine(Radian) [R]"
description = "Cos(${Angle})"
comment = "Using the radian system. "
category = TC_MATH
returns = real
[[.args]]
type = radian
default = "bj_PI"

[Tan]
title = "Tangent(Radian) [R]"
description = "Tan(${Angle})"
comment = "Using the radian system. "
category = TC_MATH
returns = real
[[.args]]
type = radian
default = "bj_PI"

[Asin]
title = "Arcsine(Radian) [R]"
description = "Asin(${Value})"
comment = "Using the radian system. Return radian value -π/2 - π/2. "
category = TC_MATH
returns = radian
[[.args]]
type = real
default = "0"
min = -1
max = 1

[Acos]
title = "Arccosine(Radian) [R]"
description = "Acos(${Value})"
comment = "Using the radian system. Return radian value 0 - π. "
category = TC_MATH
returns = radian
[[.args]]
type = real
default = "0"
min = -1
max = 1

[Atan]
title = "Arctangent(Radian) [R]"
description = "Atan(${Value})"
comment = "Using the radian system. Return radian value -π/2 - π/2. "
category = TC_MATH
returns = radian
[[.args]]
type = real
default = "0"

[Atan2]
title = "Arctangent(Y:X)(Radian) [R]"
description = "Atan(${Y} : ${X})"
comment = "Using the radian system. Return radian value -π/2 - π/2. "
category = TC_MATH
returns = radian
[[.args]]
type = real
[[.args]]
type = real

[YDWELogarithmLg]
title = "LogarithmLg(10)<By c kuhn>"
description = "Lg(${x})"
comment = "10^n=x, so lg(x)=n, e.g. lg(100)=2; Acknowledgement zyl910"
category = TC_MATH
returns = real
[[.args]]
type = real
min = 0.01

[YDWELogarithmLn]
title = "LogarithmLn (e)<By c kuhn>"
description = "Ln(${x})"
comment = "e^n=x, so ln(x)=n, e is natural logarithm, approximately equal to.718281828; Acknowledgement zyl910"
category = TC_MATH
returns = real
[[.args]]
type = real
min = 0.01

[YDWELogarithmLog]
title = "LogarithmLog(Any Value)<By c kuhn>"
description = "Log(${a})(${b})"
comment = "a^n=b, So log(a)(b)=n, e.g. log(2)(4)=2; Acknowledgement zyl910"
category = TC_MATH
returns = real
[[.args]]
type = real
min = 0.01
[[.args]]
type = real
min = 0.01

[GetLastTransmissionDurationBJ]
title = "Last Transmission Length"
description = "Length of last transmission"
comment = "This is the length, in seconds, of the last used 'Cinematic - Transmission' action."
category = TC_CINEMATIC
returns = real

[TimerGetElapsed]
title = "Elapsed Time"
description = "Elapsed time for ${Timer}"
comment =""
category = TC_TIMER
returns = real
[[.args]]
type = timer

[TimerGetRemaining]
title = "Remaining Time"
description = "Remaining time for ${Timer}"
comment =""
category = TC_TIMER
returns = real
[[.args]]
type = timer

[TimerGetTimeout]
title = "Initial Time"
description = "Initial time for ${Timer}"
comment =""
category = TC_TIMER
returns = real
[[.args]]
type = timer

[CreateTimerDialog]
title = "Create Timer Window [R]"
description = "Create a timer window for ${Timer}"
comment = "Create a timer window for timer."
category = TC_TIMER
returns = timerdialog
[[.args]]
type = timer

[CameraSetupGetField]
title = "Camera Field Of Camera Object (Special Camera) [R]"
description = "${Camera} of ${Camera Field}"
comment = ""
category = TC_CAMERA
returns = real
[[.args]]
type = camerasetup
[[.args]]
type = camerafield
default = "CameraFieldTargetDistance"

[CameraSetupGetFieldSwap]
title = "Camera Field Of Camera Object"
description = "${Camera Field} of ${Camera Object}"
comment =""
category = TC_CAMERA
returns = real
[[.args]]
type = camerafield
default = "CameraFieldTargetDistance"
[[.args]]
type = camerasetup

[GetCameraField]
title = "Camera Field Of Current Camera"
description = "${Camera Field} of the current camera view"
comment =""
category = TC_CAMERA
returns = real
[[.args]]
type = camerafield
default = "CameraFieldTargetDistance"

[GetCameraTargetPositionX]
title = "Target X Of Current Camera"
description = "Target X of current camera view"
comment =""
category = TC_CAMERA
returns = real

[GetCameraTargetPositionY]
title = "Target Y Of Current Camera"
description = "Target Y of current camera view"
comment =""
category = TC_CAMERA
returns = real

[GetCameraTargetPositionZ]
title = "Target Z Of Current Camera"
description = "Target Z of current camera view"
comment =""
category = TC_CAMERA
returns = real

[GetCameraEyePositionX]
title = "Source X Of Current Camera"
description = "Source X of current camera view"
comment =""
category = TC_CAMERA
returns = real

[GetCameraEyePositionY]
title = "Source Y Of Current Camera"
description = "Source Y of current camera view"
comment =""
category = TC_CAMERA
returns = real

[GetCameraEyePositionZ]
title = "Source Z Of Current Camera"
description = "Source Z of current camera view"
comment =""
category = TC_CAMERA
returns = real

[CameraSetupGetDestPositionLoc]
title = "Target Of Camera Object"
description = "Target of ${Camera Object}"
comment =""
category = TC_CAMERA
returns = location
[[.args]]
type = camerasetup

[GetCameraTargetPositionLoc]
title = "Target Of Current Camera"
description = "Target of current camera view"
comment =""
category = TC_CAMERA
returns = location

[GetCameraEyePositionLoc]
title = "Source Of Current Camera"
description = "Source of current camera view"
comment =""
category = TC_CAMERA
returns = location

[GetLightningColorRBJ]
title = "Red Color of Lightning"
description = "Red color of ${Lightning}"
comment = "This returns a value between 0 and 1.  Use 'Lightning - Set Lightning Effect Color' to change the color of a Lightning Effect."
script_name = GetLightningColorR
category = TC_LIGHTNING
use_in_event = 0
returns = real
[[.args]]
type = lightning
default = "GetLastCreatedLightningBJ"

[GetLightningColorGBJ]
title = "Green Color of Lightning"
description = "Green color of ${Lightning}"
comment = "This returns a value between 0 and 1.  Use 'Lightning - Set Lightning Effect Color' to change the color of a Lightning Effect."
script_name = GetLightningColorG
category = TC_LIGHTNING
use_in_event = 0
returns = real
[[.args]]
type = lightning
default = "GetLastCreatedLightningBJ"

[GetLightningColorBBJ]
title = "Blue Color of Lightning"
description = "Blue color of ${Lightning}"
comment = "This returns a value between 0 and 1.  Use 'Lightning - Set Lightning Effect Color' to change the color of a Lightning Effect."
script_name = GetLightningColorB
category = TC_LIGHTNING
use_in_event = 0
returns = real
[[.args]]
type = lightning
default = "GetLastCreatedLightningBJ"

[GetLightningColorABJ]
title = "Alpha Value of Lightning"
description = "Alpha value of ${Lightning}"
comment = "This returns a value between 0 and 1.  A value of 0 corresponds to a completely invisible lightning effect.  Use 'Lightning - Set Lightning Effect Color' to change the alpha value of a Lightning Effect."
script_name = GetLightningColorA
category = TC_LIGHTNING
use_in_event = 0
returns = real
[[.args]]
type = lightning
default = "GetLastCreatedLightningBJ"

[AddLightning]
title = "Create Lightning Effect [R]"
description = "Create a Lightning effect: ${Lightning effect} (${Boolean} check visible) Start Point:(${X},${Y}) End Point:(${X},${Y})"
comment = "Create a Lightning effect. Allowing inspection visibility will not create Lightning effects when the starting point and endpoint are not visible."
category = TC_LIGHTNING
returns = lightning
[[.args]]
type = lightningtype
default = "LightningTypeCLPB"
[[.args]]
type = allowdontoption
default = "AllowDontDont"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[AddLightningEx]
title = "Create Lightning Effect (Z Axis) [R]"
description = Create a Lightning effect: ${Lightning effect} (${Boolean} check visible) Start Point:(${X},${Y},${Z}) End Point:(${X},${Y},${Z})"
comment = "Create a Lightning effect. Allowing inspection visibility will not create Lightning effects when the starting point and endpoint are not visible."
category = TC_LIGHTNING
returns = lightning
[[.args]]
type = lightningtype
default = "LightningTypeCLPB"
[[.args]]
type = allowdontoption
default = "AllowDontDont"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[GetSoundDurationBJ]
title = "Sound Length"
description = "Length of ${Sound}"
comment = "This returns the duration of a sound, in seconds."
category = TC_SOUND
returns = real
[[.args]]
type = sound
default = "GetLastPlayedSound"

[GetSoundFileDurationBJ]
title = "Music Length"
description = "Length of ${Music}"
comment = "This returns the duration of a music score, in seconds."
category = TC_SOUND
returns = real
[[.args]]
type = musicfile
default = "GetLastPlayedMusic"

[GetLastCreatedUnit]
title = "Last Created Unit"
description = "Last created unit"
comment = "This is the last unit created via a 'Unit - Create' trigger action."
category = TC_LAST
returns = unit

[GetLastRestoredUnitBJ]
title = "Last Restored Unit"
description = "Last restored unit"
comment = "This is the last unit restored via a 'Game Cache - Restore Unit' trigger action."
category = TC_LAST
returns = unit

[GetLastReplacedUnitBJ]
title = "Last Replaced Unit"
description = "Last replaced unit"
comment = "This is the last unit created via a 'Unit - Replace' trigger action."
category = TC_LAST
returns = unit

[GetLastHauntedGoldMine]
title = "Last Haunted Gold Mine"
description = "Last Haunted Gold Mine"
comment = "This is the last Haunted Gold Mine created via a 'Neutral Building - Haunt Gold Mine (Instantly)' trigger action."
category = TC_LAST
returns = unit

[YDWEGetLastUnitPool]
title = "YDWE Last Created Unit Pool [YDWE]"
description = "Last Created Unit Pool"
comment = "The Unit pool must be generated by YDWE, <YDWE Create Unit Pool> action, otherwise it will not be available."
category = TC_LAST
use_in_event = 0
returns = unitpool

[GetLastCreatedDestructable]
title = "Last Created Destructable"
description = "Last created Destructable"
comment = "This is the last Destructable created via a 'Destructable - Create' trigger action."
category = TC_LAST
returns = destructable

[GetLastCreatedItem]
title = "Last Created Item"
description = "Last created item"
comment = "This is the last item created via an 'Item - Create' or 'Hero - Create Item For Hero' trigger action."
category = TC_LAST
returns = item

[GetLastRemovedItem]
title = "Last Dropped Item"
description = "Last dropped item"
comment = "This is the last item dropped via a 'Hero - Drop Item' trigger action."
category = TC_LAST
returns = item

[GetLastMovedItemInItemSlot]
title = "YDWE Get Last Moved Item In Item Slot [YDWE]"
description = "Get last moved item in item slot"
comment = "The last Unit moving in the Item column, Item"
category = TC_LAST
returns = item

[GetLastCombinedItem]
title = "YDWE Get Last Combined Item [YDWE]"
description = "Get last combined item"
comment = "Finally, the Item synthesized by the Item synthesis system"
category = TC_LAST
returns = item

[GetLastCreatedGroup]
title = "Last Created Unit Group"
description = "Last created unit group"
comment = "This is the last set of units created via a 'Unit - Create' trigger action."
category = TC_LAST
returns = group

[GetLastCreatedFogModifier]
title = "Last Created Visibility Modifier"
description = "Last created visibility modifier"
comment = "This is the last visibility modifier created via a 'Visibility - Create Visibility Modifier' trigger action."
category = TC_LAST
returns = fogmodifier

[GetLastCreatedEffectBJ]
title = "Last Created Special Effect"
description = "Last created special effect"
comment =""
category = TC_LAST
returns = effect

[GetLastCreatedLightningBJ]
title = "Last Created Lightning Effect"
description = "Last created lightning effect"
comment =""
category = TC_LAST
use_in_event = 0
returns = lightning

[GetLastCreatedImage]
title = "Last Created Image"
description = "Last created image"
comment =""
category = TC_LAST
use_in_event = 0
returns = image

[GetLastCreatedUbersplat]
title = "Last Created Ubersplat"
description = "Last created ubersplat"
comment =""
category = TC_LAST
use_in_event = 0
returns = ubersplat

[GetLastCreatedWeatherEffect]
title = "Last Created Weather Effect"
description = "Last created weather effect"
comment = "This is the last weather effect created via an 'Environment - Create Weather Effect' trigger action."
category = TC_LAST
returns = weathereffect

[GetLastCreatedTerrainDeformation]
title = "Last Created Terrain Deformation"
description = "Last created terrain deformation"
comment = "This is the last terrain deformation created via any of the 'Environment - Create Terrain Deformation' trigger actions."
category = TC_LAST
use_in_event = 0
returns = terraindeformation

[GetLastPlayedSound]
title = "Last Played Sound"
description = "Last played sound"
comment = "This is the last sound played via a 'Sound - Play Sound' or 'Cinematic - Transmission' trigger action."
category = TC_LAST
returns = sound

[GetLastPlayedMusic]
title = "Last Played Music"
description = "Last played music"
comment = "This is the last music played via a 'Sound - Play Music' trigger action."
category = TC_LAST
returns = musicfile

[GetLastCreatedQuestBJ]
title = "Last Created Quest"
description = "Last created quest"
comment = "This is the last quest created via a 'Quest - Create Quest' trigger action."
category = TC_LAST
returns = quest

[GetLastCreatedQuestItemBJ]
title = "Last Created Quest Requirement"
description = "Last created quest requirement"
comment = "This is the last quest requirement created via a 'Quest - Create Quest Requirement' trigger action."
category = TC_LAST
returns = questitem

[GetLastCreatedDefeatConditionBJ]
title = "Last Created Defeat Condition"
description = "Last created defeat condition"
comment = "This is the last defeat condition created via a 'Quest - Create Defeat Condition' trigger action."
category = TC_LAST
returns = defeatcondition

[GetLastCreatedButtonBJ]
title = "Last Created Dialog Button"
description = "Last created dialog Button"
comment = "This is the last dialog button created via a 'Dialog - Create Dialog Button' trigger action."
category = TC_LAST
returns = button

[GetLastCreatedLeaderboard]
title = "Last Created Leaderboard"
description = "Last created leaderboard"
comment = "This is the last leaderboard created via a 'Leaderboard - Create Leaderboard' trigger action."
category = TC_LAST
returns = leaderboard

[GetLastCreatedMultiboard]
title = "Last Created Multiboard"
description = "Last created multiboard"
comment = "This is the last multiboard created via a 'Multiboard - Create Multiboard' trigger action."
category = TC_LAST
use_in_event = 0
returns = multiboard

[GetLastCreatedTimerBJ]
title = "Last Started Timer"
description = "Last started timer"
comment = "This is the last timer started via a 'Countdown Timer - Start Timer' trigger action."
category = TC_LAST
returns = timer

[GetLastCreatedTimerDialogBJ]
title = "Last Created Timer Window"
description = "Last created timer window"
comment = "This is the last timer window created via a 'Countdown Timer - Create Timer Window' trigger action."
category = TC_LAST
returns = timerdialog

[GetLastCreatedGameCacheBJ]
title = "Last Created Game Cache"
description = "Last created game cache"
comment = "This is the last game cache created via a 'Game Cache - Create Game Cache' trigger action."
category = TC_LAST
returns = gamecache

[GetLastCreatedHashtableBJ]
title = "Last Created Hashtable"
description = "Last created hashtable"
comment = "This is the last hashtable created via a 'Hashtable - Create Hashtable' trigger action."
category = TC_LAST
returns = hashtable

[LoadHashtableHandle]
title = "<1.24>  Load Hashtable Value (Hashtable) [C]"
description = "Load from ${Hashtable} with ${Value} of ${Value}"
comment = "If it does not exist, return null"
category = TC_LAST
returns = hashtable
[[.args]]
type = hashtable
default = "GetLastCreatedHashtableBJ"
[[.args]]
type = integer
[[.args]]
type = integer

[GetLastCreatedTextTag]
title = "Last Created Floating Text"
description = "Last created floating text"
comment = "This is the last floating text created via a 'Floating Text - Create Floating Text' trigger action."
category = TC_LAST
use_in_event = 0
returns = texttag

[YDWECinSActor]
title = "YDWE Actor Unit"
description = "Actor in film system with the (${Integer})"
comment = "Get the actor unit in the film system by index."
category = TC_SCRIPTSET
returns = unit
[[.args]]
type = integer
default = "1"
min = 1

[PlaceRandomUnit]
title = "Place Random Unit [R]"
description = "Select a randowm unit in ${Unit Pool} for ${Player} and place at (${X} , ${Y}) , face ${degree}"
comment = "Randomly select a UnitType from the Unit pool."
category = TC_UNITPOOL
returns = unit
[[.args]]
type = unitpool
[[.args]]
type = player
default = "Player00"
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"
[[.args]]
type = degree
default = "0"

[YDWEGetLastPoolAbstractedUnit]
title = "YDWE Get Last Pool Abstracted Unit"
description = "Finally Unit from the Unit pool"
comment = "The unit must be provided by YDWE, <YDWE Select Place Unit> action generation, otherwise it can not be obtained.."
category = TC_UNITPOOL
returns = unit

[PlaceRandomItem]
title = "Place Random Item [R]"
description = "Select a random item form ${Item Pool} and place at (${X} , ${Y})Location "
comment = ""
category = TC_ITEMPOOL
returns = item
[[.args]]
type = itempool
[[.args]]
type = real
default = "0"
[[.args]]
type = real
default = "0"

[DialogCreate]
title = "Create Dialog [R]"
description = "Create Dialog"
comment = "Create a New Dialog."
category = TC_DIALOG
returns = dialog

[YDWEGetUnitID]
title = "Get Unit Handle ID"
description = "Get ${Unit} handle ID"
comment = "You can turn an Unit into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = unit
default = "GetTriggerUnit"

[YDWEGetPlayerID]
title = "Get Player Handle ID"
description = "Get ${Player} Handle ID"
comment = "You can turn an Player into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = player
default = "GetTriggerPlayer"

[YDWEGetItemID]
title = "Get Item Handle ID"
description = "Get ${Item} Handle ID"
comment = "You can turn an Item into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = item
default = "GetManipulatedItem"

[YDWEGetTimerID]
title = "Get Timer Handle ID"
description = "Get ${Timer} Handle ID"
comment = "You can turn an Timer into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = timer
default = "GetLastCreatedTimerBJ"

[YDWEGetTriggerID]
title = "Get Trigger Handle ID"
description = "Get ${Trigger} Handle ID"
comment = "You can turn an Trigger into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = trigger
default = "GetTriggeringTrigger"

[YDWEGetGroupID]
title = "Get Unit Group Handle ID"
description = "Get ${Unit Group} Handle ID"
comment = "You can turn an Unit Group into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = group
default = "GetLastCreatedGroup"

[YDWEGetLocationID]
title = "Get Location Handle ID"
description = "Get ${Location} Handle ID"
comment = "You can turn an Location into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = location

[YDWEGetUnitTypeID]
title = "Get UnitType Handle ID"
description = "Get ${UnitType} Handle ID"
comment = "You can turn an UnitType into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = unitcode
default = "hfoo"

[YDWEGetAbilityTypeID]
title = "Get Ability Type Handle ID"
description = "Get ${Ability Type} Handle ID"
comment = "You can turn an Ability Type into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = abilcode
default = "Aloc"

[YDWEGetItemTypeID]
title = "Get Item Type Handle ID"
description = "Get ${Item Type} Handle ID"
comment = "You can turn an Item Type into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = itemcode
default = "spsh"

[YDWEGetMultiboardID]
title = "Get Multi Board Handle ID"
description = "Get ${Multi Board} Handle ID"
comment = "You can turn an Multi Board into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = multiboard
default = "GetLastCreatedMultiboard"

[YDWEGetMultiboardItemID]
title = "Get Multi Board Item Handle ID"
description = "Get ${Multi Board Item} Handle ID"
comment = "You can turn an Multi Board Item into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = multiboarditem

[YDWEGetTextTagID]
title = "Get Text Tag Handle ID"
description = "Get ${Text Tag} Handle ID"
comment = "You can turn an Text Tag into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = texttag
default = "GetLastCreatedTextTag"

[YDWEGetLightningID]
title = "Get Lightning Handle ID"
description = "Get ${Lightning} Handle ID"
comment = "You can turn an Lightning into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = lightning
default = "bj_lastCreatedLightning"

[YDWEGetRegionID]
title = "Get Region Handle ID"
description = "Get ${Region} Handle ID"
comment = "You can turn an Region into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = region
default = "GetTriggeringRegion"

[YDWEGetRectID]
title = "Get Rect Handle ID"
description = "Get ${Rect} Handle ID"
comment = "You can turn an Rect into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = rect
default = "GetPlayableMapRect"

[YDWEGetLeaderboardID]
title = "Get Leaderboard Handle ID"
description = "Get ${Leaderboard} Handle ID"
comment = "You can turn an Leaderboard into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = leaderboard
default = "DestroyLeaderboard"

[YDWEGetEffectID]
title = "Get Effect Handle ID"
description = "Get ${Effect} Handle ID"
comment = "You can turn an Effect into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = effect
default = "GetLastCreatedEffectBJ"

[YDWEGetDestructableID]
title = "Get Destructable Handle ID"
description = "Get ${Destructable} Handle ID"
comment = "You can turn an Destructable into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = destructable
default = "GetLastCreatedDestructable"

[YDWEGetTriggerConditionID]
title = "Get Condition Handle ID"
description = "Get ${Condition} Handle ID"
comment = "You can turn an Condition into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = triggercondition

[YDWEGetTriggerActionID]
title = "Get Trigger Action Handle ID"
description = "Get ${Trigger Action} Handle ID"
comment = "You can turn an Trigger Action into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = triggeraction

[YDWEGetTriggerEventID]
title = "Get Event Handle ID"
description = "Get ${Event} Handle ID"
comment = "You can turn an Event into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = event

[YDWEGetForceID]
title = "Get Force Handle ID"
description = "Get ${Force} Handle ID"
comment = "You can turn an Force into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = force

[YDWEGetBoolexprID]
title = "Get Boolexpr Handle ID"
description = "Get ${Boolexpr} Handle ID"
comment = "You can turn an Boolexpr into an integer to store the cache or Hash table."
category = TC_YDID
returns = integer
[[.args]]
type = boolexpr

[GetStoredBooleanBJ]
title = "Load Boolean Value"
description = "Load ${Label} of ${Category} from ${Game Cache}"
comment = "If the label is not found, this function returns False."
category = TC_YDHIDE
returns = boolean
[[.args]]
type = string
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"

[GetStoredIntegerBJ]
title = "Load Integer Value"
description = "Load ${Label} of ${Category} from ${Game Cache}"
comment = "If the label is not found, this function returns 0."
category = TC_YDHIDE
returns = integer
[[.args]]
type = string
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"

[GetStoredRealBJ]
title = "Load Real Value"
description = "Load ${Label} of ${Category} from ${Game Cache}"
comment = "If the label is not found, this function returns 0."
category = TC_YDHIDE
returns = real
[[.args]]
type = string
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"

[GetStoredStringBJ]
title = "Load String Value"
description = "Load ${Label} of ${Category} from ${Game Cache}"
comment = "If the label is not found, this function returns an empty string."
category = TC_YDHIDE
use_in_event = 0
returns = string
[[.args]]
type = string
[[.args]]
type = string
default = "\"Category\""
[[.args]]
type = gamecache
default = "GetLastCreatedGameCacheBJ"

[YDWEConvert]
title = "YDWE Convert ID"
description = "${ID}"
comment = ""
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = integer

[YDWEAbilityId2OrderId]
title = "YDWE Ability ID To Order ID"
description = "${Ability} of ${type}"
comment = "AbilityID need a const value"
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = abilcode
default = 'AHbz'
[[.args]]
type = OrderType
default = OrderTypeOrder

[YDWEUOrderId2OrderId]
title = "Unit Oreder ID To Order ID"
description = "${Order}"
comment = ""
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = ordercodeutarg

[YDWEPOrderId2OrderId]
title = "Point Target Order ID to Order ID"
description = "${Order}"
comment = ""
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = ordercodeptarg

[YDWEDOrderId2OrderId]
title = "Destructable Target Order ID to Order ID"
description = "${Order}"
comment = ""
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = ordercodedtarg

[YDWEIOrderId2OrderId]
title = "Item Target Order ID to Order ID"
description = "${Order}"
comment = ""
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = ordercodeitarg

[YDWENOrderId2OrderId]
title = "Immediate Order ID to Order ID"
description = "${Order}"
comment = ""
category = TC_CONVERSION
returns = ordercode
[[.args]]
type = ordercodenotarg
